
examples/c/app/out/app.elf:     file format elf32-littlearm
examples/c/app/out/app.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000a45

Program Header:
0x70000001 off    0x00012388 vaddr 0x1a002388 paddr 0x1a002388 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00010048 vaddr 0x10000048 paddr 0x10000048 align 2**16
         filesz 0x00000000 memsz 0x00000098 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00002390 memsz 0x00002390 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a002390 align 2**16
         filesz 0x00000048 memsz 0x00000048 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002384  1a000000  1a000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  10000000  1a002390  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020048  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020048  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020048  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020048  2**2
                  CONTENTS
  6 .bss          00000098  10000048  10000048  00010048  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020048  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020048  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020048  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020048  2**2
                  CONTENTS
 11 .init_array   00000004  1a002384  1a002384  00012384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a002388  1a002388  00012388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  00020048  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  00020048  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  00020048  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  00020048  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  00020048  2**2
                  CONTENTS
 18 .noinit       00000000  100000e0  100000e0  00020048  2**2
                  CONTENTS
 19 .debug_info   00020029  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 000044cf  00000000  00000000  00040071  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_aranges 000009c0  00000000  00000000  00044540  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 00000a08  00000000  00000000  00044f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  0000cc53  00000000  00000000  00045908  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_line   0000f92c  00000000  00000000  0005255b  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_str    00028570  00000000  00000000  00061e87  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .comment      00000068  00000000  00000000  0008a3f7  2**0
                  CONTENTS, READONLY
 27 .ARM.attributes 00000032  00000000  00000000  0008a45f  2**0
                  CONTENTS, READONLY
 28 .debug_frame  00001828  00000000  00000000  0008a494  2**2
                  CONTENTS, READONLY, DEBUGGING
 29 .debug_loc    00007d25  00000000  00000000  0008bcbc  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000048 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a002384 l    d  .init_array	00000000 .init_array
1a002388 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
100000e0 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 app.c
00000000 l    df *ABS*	00000000 ili9341.c
10000048 l     O .bss	00000074 ili9341_drivers_pool
00000000 l    df *ABS*	00000000 ili9341_LPC4337_patch.c
00000000 l    df *ABS*	00000000 board_sysinit.c
1a002124 l     O .text	00000004 InitClkStates
1a002128 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 board.c
1a000b80 l     F .text	00000044 Board_LED_Init
1a000bc4 l     F .text	00000040 Board_TEC_Init
1a000c04 l     F .text	00000040 Board_GPIO_Init
1a000c44 l     F .text	00000030 Board_ADC_Init
1a000c74 l     F .text	00000038 Board_SPI_Init
1a000cac l     F .text	00000024 Board_I2C_Init
1a0021a0 l     O .text	00000008 GpioButtons
1a0021a8 l     O .text	0000000c GpioLeds
1a0021b4 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a000d2c l     F .text	0000001a SSP_Write2BFifo
1a000d46 l     F .text	00000018 SSP_Write1BFifo
1a000d5e l     F .text	00000042 SSP_Read2BFifo
1a000da0 l     F .text	00000040 SSP_Read1BFifo
1a000de0 l     F .text	00000014 Chip_SSP_GetClockIndex
1a000df4 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000000 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a000fbc l     F .text	00000014 Chip_ADC_GetClockIndex
1a000fd0 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a0021cc l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a0011f0 l     F .text	000000a0 pll_calc_divs
1a001290 l     F .text	0000010c pll_get_frac
1a00139c l     F .text	0000004c Chip_Clock_FindBaseClock
1a001610 l     F .text	00000022 Chip_Clock_GetDivRate
100000bc l     O .bss	00000008 audio_usb_pll_freq
1a002220 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a00177c l     F .text	0000002c Chip_UART_GetIndex
1a00228c l     O .text	00000008 UART_BClock
1a002294 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000038 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a00192c l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_spi.c
00000000 l    df *ABS*	00000000 sapi_tick.c
100000c4 l     O .bss	00000004 callBackFuncParams
100000c8 l     O .bss	00000008 tickCounter
100000d0 l     O .bss	00000004 tickHookFunction
00000000 l    df *ABS*	00000000 sapi_usb_device.c
100000d4 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 system.c
00000000 l    df *ABS*	00000000 
1a002388 l       .init_array	00000000 __init_array_end
1a002384 l       .bss_RAM5	00000000 __preinit_array_end
1a002384 l       .init_array	00000000 __init_array_start
1a002384 l       .bss_RAM5	00000000 __preinit_array_start
1a001434 g     F .text	0000001c Chip_Clock_GetDividerSource
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a000382 g     F .text	0000003e _ili9341_write_cmd
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a000d24 g     F .text	00000008 __stdio_init
1a00017a  w    F .text	00000002 HardFault_Handler
1a00035e g     F .text	00000024 _ili9341_wait_for_spi_ready
1a000000 g       *ABS*	00000000 __vectors_start__
1a001076 g     F .text	0000000c Chip_ADC_SetResolution
1a001ca8 g     F .text	0000002c SysTick_Handler
1a000a40  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a000186  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a002390 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
1a00068e g     F .text	00000216 _ili9341_init_display
53ff6e4a g       *ABS*	00000000 __valid_user_code_checksum
1a000354 g     F .text	0000000a _ili9341_write_bytes_end
1a002390 g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a000404 g     F .text	0000000c _ili9341_delay_ms
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a0016b2 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a000958 g     F .text	00000028 ili9341_1ms_timer_cb
1a001d64 g     F .text	00000000 .hidden __aeabi_uldivmod
100000e0 g       .noinit	00000000 _noinit
100000d8 g     O .bss	00000004 SystemCoreClock
1a0017a8 g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a000180  w    F .text	00000002 UsageFault_Handler
1a001730 g     F .text	0000004c Chip_Clock_GetRate
1a0005f4 g     F .text	0000009a ili9341_set_region
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a000b08 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a001d94 g     F .text	000002d0 .hidden __udivmoddi4
1a00219c g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a002388 g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a000a18 g     F .text	00000016 spi_tx_dma_b
1a002068 g     F .text	00000048 __libc_init_array
1a000436 g     F .text	00000028 _ili9341_fix_region
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a000cf4 g     F .text	00000030 Board_Init
1a000ace  w    F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
1a000e1e g     F .text	000000a8 Chip_SSP_RWFrames_Blocking
1a0001ba  w    F .text	00000002 RTC_IRQHandler
100000e0 g       .bss	00000000 _ebss
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a000a44 g     F .text	00000088 Reset_Handler
1a001c2c g     F .text	0000007c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a000f80 g     F .text	00000038 Chip_I2C_SetClockRate
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a0013e8 g     F .text	0000004c Chip_Clock_EnableCrystal
1a0008a4 g     F .text	000000b4 ili9341_init
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00018a g     F .text	0000001e data_init
1a0003e2 g     F .text	00000022 _ili9341_write_data
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a000f5c g     F .text	00000024 Chip_I2C_Init
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a0015a4 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a00229c g     O .text	000000e6 gpioPinsInit
1a000e0c g     F .text	00000012 Chip_SSP_SetClockRate
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a00168c g     F .text	00000026 Chip_Clock_GetBaseClock
10000048 g       .bss	00000000 _bss
1a001044 g     F .text	00000032 Chip_ADC_SetSampleRate
1a000342 g     F .text	00000012 _ili9341_write_bytes_start
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a000ec6 g     F .text	0000003e Chip_SSP_SetBitRate
1a000fb8 g     F .text	00000002 Chip_GPIO_Init
1a0021c8 g     O .text	00000004 OscRateIn
100000e0 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a000980 g     F .text	00000008 diskTickHook
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a001bc8 g     F .text	0000002c spiWrite
1a000178 g       .text	00000000 __bss_section_table_end
1a001960 g     F .text	000001ac gpioInit
1a002064  w    F .text	00000002 .hidden __aeabi_ldiv0
1a001cd4 g     F .text	0000001c USB0_IRQHandler
1a0009b8 g     F .text	00000018 ili9341_spi_init
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a001450 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a000568 g     F .text	0000008c ili9341_set_orientation
1a000988 g     F .text	00000030 ili9341_gpio_init
1a0020b0 g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000300 g     F .text	00000038 main
1a0001ba  w    F .text	00000002 WDT_IRQHandler
1a001b78 g     F .text	00000050 spiInit
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a0016c0 g     F .text	0000003c Chip_Clock_EnableOpts
1a00146c g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a001524 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a0018d8 g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a001b0c g     F .text	0000006a gpioWrite
1a000acc  w    F .text	00000002 _fini
1a001004 g     F .text	00000040 Chip_ADC_Init
100000dc g     O .bss	00000004 g_pUsbApi
1a000ad0 g     F .text	00000038 Board_SetupMuxing
1a000460 g     F .text	00000108 ili9341_get_default_hw_cfg
1a0017fc g     F .text	000000dc Chip_UART_SetBaudFDR
10000040 g     O .data	00000008 tickRateMS
1a000a00 g     F .text	00000018 gpio_rst_pin
1a0001ba  w    F .text	00000002 ETH_IRQHandler
1a000a30 g     F .text	00000010 spi_tx_dma_ready
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a000410 g     F .text	0000001c _ili9341_region_valid
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1a001bf4 g     F .text	00000020 tickCallbackSet
100000e0 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a000f04 g     F .text	00000038 Chip_SSP_Init
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a0009d0 g     F .text	00000018 gpio_cs_pin
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a000cd0 g     F .text	00000024 Board_Debug_Init
10000048 g       .data	00000000 _edata
1a000f3c g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a001084 g     F .text	00000158 Chip_SetupCoreClock
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
1a000000 g     O .text	00000040 g_pfnVectors
1a0011dc g     F .text	00000014 SystemCoreClockUpdate
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a002064  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
1a0016fc g     F .text	00000034 Chip_Clock_Enable
1a0001ba  w    F .text	00000002 UART3_IRQHandler
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a001cf0 g     F .text	00000074 boardInit
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a0003c0 g     F .text	00000022 _ili9341_write_bytes
1a000338 g     F .text	0000000a _ili9341_enable
1a001c14 g     F .text	00000018 tickPowerSet
1a0009e8 g     F .text	00000018 gpio_dc_pin
1a001634 g     F .text	00000058 Chip_Clock_SetBaseClock
1a001910 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a000b74 g     F .text	0000000c Board_SystemInit
1a00042c g     F .text	0000000a _ili9341_swap



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 45 0a 00 1a 79 01 00 1a 7b 01 00 1a     ....E...y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 4a 6e ff 53     }...........Jn.S
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	a9 1c 00 1a                                         ....

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	d5 1c 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a002390 	.word	0x1a002390
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000048 	.word	0x00000048
1a000120:	1a002390 	.word	0x1a002390
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a002390 	.word	0x1a002390
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a002390 	.word	0x1a002390
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a002390 	.word	0x1a002390
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000048 	.word	0x10000048
1a000154:	00000098 	.word	0x00000098
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	f850 4b04 	ldr.w	r4, [r0], #4
1a000196:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019a:	3304      	adds	r3, #4
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	428b      	cmp	r3, r1
1a0001ac:	d204      	bcs.n	1a0001b8 <bss_init+0x10>
        *pulDest++ = 0;
1a0001ae:	2200      	movs	r2, #0
1a0001b0:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	3304      	adds	r3, #4
1a0001b6:	e7f8      	b.n	1a0001aa <bss_init+0x2>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <main>:

#include "ili9341.h"
#include "sapi.h"


int main(void) {
1a000300:	b530      	push	{r4, r5, lr}
1a000302:	b09d      	sub	sp, #116	; 0x74

    boardConfig();
1a000304:	f001 fcf4 	bl	1a001cf0 <boardInit>
    ili9341_gpio_init();
1a000308:	f000 fb3e 	bl	1a000988 <ili9341_gpio_init>
    ili9341_spi_init();
1a00030c:	f000 fb54 	bl	1a0009b8 <ili9341_spi_init>

    // Inicializaci�n y configuraci�n del display ILI9341
    ili9341_desc_ptr_t display;
    const ili9341_cfg_t display_cfg = {
1a000310:	ac12      	add	r4, sp, #72	; 0x48
1a000312:	4d08      	ldr	r5, [pc, #32]	; (1a000334 <main+0x34>)
1a000314:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000316:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000318:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00031a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00031c:	e895 0003 	ldmia.w	r5, {r0, r1}
1a000320:	e884 0003 	stmia.w	r4, {r0, r1}
        .timeout_ms = 10000,
        .wup_delay_ms = 20,
        .restart_delay_ms = 20
    };

    const ili9341_hw_cfg_t hw_cfg = ili9341_get_default_hw_cfg();
1a000324:	a801      	add	r0, sp, #4
1a000326:	f000 f89b 	bl	1a000460 <ili9341_get_default_hw_cfg>

    display = ili9341_init(&display_cfg, &hw_cfg);
1a00032a:	a901      	add	r1, sp, #4
1a00032c:	a812      	add	r0, sp, #72	; 0x48
1a00032e:	f000 fab9 	bl	1a0008a4 <ili9341_init>

    // C�digo de aplicaci�n

    while (1) {
        // C�digo de la aplicaci�n
    }
1a000332:	e7fe      	b.n	1a000332 <main+0x32>
1a000334:	1a0020c0 	.word	0x1a0020c0

1a000338 <_ili9341_enable>:
	err |= ili9341_set_region(desc, top_left, bottom_right);

	return err;
}

void _ili9341_enable(const ili9341_desc_ptr_t desc) {
1a000338:	b508      	push	{r3, lr}
	desc->rst_pin(ILI9341_PIN_SET);
1a00033a:	6943      	ldr	r3, [r0, #20]
1a00033c:	2001      	movs	r0, #1
1a00033e:	4798      	blx	r3
}
1a000340:	bd08      	pop	{r3, pc}

1a000342 <_ili9341_write_bytes_start>:
	err |= _ili9341_wait_for_spi_ready(desc);

	return err;
}

void _ili9341_write_bytes_start(const ili9341_desc_ptr_t desc) {
1a000342:	b510      	push	{r4, lr}
1a000344:	4604      	mov	r4, r0
	desc->dc_pin(ILI9341_PIN_SET);
1a000346:	69c3      	ldr	r3, [r0, #28]
1a000348:	2001      	movs	r0, #1
1a00034a:	4798      	blx	r3
	desc->cs_pin(ILI9341_PIN_RESET);
1a00034c:	69a3      	ldr	r3, [r4, #24]
1a00034e:	2000      	movs	r0, #0
1a000350:	4798      	blx	r3
}
1a000352:	bd10      	pop	{r4, pc}

1a000354 <_ili9341_write_bytes_end>:

void _ili9341_write_bytes_end(const ili9341_desc_ptr_t desc) {
1a000354:	b508      	push	{r3, lr}
	desc->cs_pin(ILI9341_PIN_SET);
1a000356:	6983      	ldr	r3, [r0, #24]
1a000358:	2001      	movs	r0, #1
1a00035a:	4798      	blx	r3
}
1a00035c:	bd08      	pop	{r3, pc}

1a00035e <_ili9341_wait_for_spi_ready>:
	_ili9341_write_bytes_end(desc);

	return err;
}

int _ili9341_wait_for_spi_ready(const ili9341_desc_ptr_t desc) {
1a00035e:	b510      	push	{r4, lr}
1a000360:	4604      	mov	r4, r0
	desc->curr_time_cnt = 0;
1a000362:	2300      	movs	r3, #0
1a000364:	62c3      	str	r3, [r0, #44]	; 0x2c
	bool timeout, tx_ready = false;
	do {
		tx_ready = desc->spi_tx_ready();
1a000366:	6923      	ldr	r3, [r4, #16]
1a000368:	4798      	blx	r3
		timeout = (desc->curr_time_cnt >= desc->timeout_ms);
1a00036a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a00036c:	6a23      	ldr	r3, [r4, #32]
	} while(!tx_ready && !timeout);
1a00036e:	b908      	cbnz	r0, 1a000374 <_ili9341_wait_for_spi_ready+0x16>
1a000370:	429a      	cmp	r2, r3
1a000372:	d3f8      	bcc.n	1a000366 <_ili9341_wait_for_spi_ready+0x8>

	if (timeout) {
1a000374:	429a      	cmp	r2, r3
1a000376:	d201      	bcs.n	1a00037c <_ili9341_wait_for_spi_ready+0x1e>
		return -ILI9341_ERR_COMM_TIMEOUT;
	}

	return ILI9341_SUCCESS;
1a000378:	2000      	movs	r0, #0
}
1a00037a:	bd10      	pop	{r4, pc}
		return -ILI9341_ERR_COMM_TIMEOUT;
1a00037c:	f04f 30ff 	mov.w	r0, #4294967295
1a000380:	e7fb      	b.n	1a00037a <_ili9341_wait_for_spi_ready+0x1c>

1a000382 <_ili9341_write_cmd>:
int _ili9341_write_cmd(const ili9341_desc_ptr_t desc, ili9341_cmd_t command) {
1a000382:	b530      	push	{r4, r5, lr}
1a000384:	b083      	sub	sp, #12
1a000386:	4604      	mov	r4, r0
1a000388:	f88d 1007 	strb.w	r1, [sp, #7]
	desc->dc_pin(ILI9341_PIN_RESET);
1a00038c:	69c3      	ldr	r3, [r0, #28]
1a00038e:	2000      	movs	r0, #0
1a000390:	4798      	blx	r3
	desc->cs_pin(ILI9341_PIN_RESET);
1a000392:	69a3      	ldr	r3, [r4, #24]
1a000394:	2000      	movs	r0, #0
1a000396:	4798      	blx	r3
	err |= _ili9341_wait_for_spi_ready(desc);
1a000398:	4620      	mov	r0, r4
1a00039a:	f7ff ffe0 	bl	1a00035e <_ili9341_wait_for_spi_ready>
1a00039e:	4605      	mov	r5, r0
	err |= desc->spi_tx_dma(&command, ILI9341_CMD_LEN);
1a0003a0:	68e3      	ldr	r3, [r4, #12]
1a0003a2:	2101      	movs	r1, #1
1a0003a4:	f10d 0007 	add.w	r0, sp, #7
1a0003a8:	4798      	blx	r3
1a0003aa:	4305      	orrs	r5, r0
	err |= _ili9341_wait_for_spi_ready(desc);
1a0003ac:	4620      	mov	r0, r4
1a0003ae:	f7ff ffd6 	bl	1a00035e <_ili9341_wait_for_spi_ready>
1a0003b2:	4305      	orrs	r5, r0
	desc->cs_pin(ILI9341_PIN_SET);
1a0003b4:	69a3      	ldr	r3, [r4, #24]
1a0003b6:	2001      	movs	r0, #1
1a0003b8:	4798      	blx	r3
}
1a0003ba:	4628      	mov	r0, r5
1a0003bc:	b003      	add	sp, #12
1a0003be:	bd30      	pop	{r4, r5, pc}

1a0003c0 <_ili9341_write_bytes>:
int _ili9341_write_bytes(const ili9341_desc_ptr_t desc, const uint8_t* bytes, uint32_t size) {
1a0003c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0003c2:	4605      	mov	r5, r0
1a0003c4:	460e      	mov	r6, r1
1a0003c6:	4617      	mov	r7, r2
	err |= _ili9341_wait_for_spi_ready(desc);
1a0003c8:	f7ff ffc9 	bl	1a00035e <_ili9341_wait_for_spi_ready>
1a0003cc:	4604      	mov	r4, r0
	err |= desc->spi_tx_dma(bytes, size);
1a0003ce:	68eb      	ldr	r3, [r5, #12]
1a0003d0:	4639      	mov	r1, r7
1a0003d2:	4630      	mov	r0, r6
1a0003d4:	4798      	blx	r3
1a0003d6:	4304      	orrs	r4, r0
	err |= _ili9341_wait_for_spi_ready(desc);
1a0003d8:	4628      	mov	r0, r5
1a0003da:	f7ff ffc0 	bl	1a00035e <_ili9341_wait_for_spi_ready>
}
1a0003de:	4320      	orrs	r0, r4
1a0003e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1a0003e2 <_ili9341_write_data>:
int _ili9341_write_data(const ili9341_desc_ptr_t desc, const uint8_t* buffer, uint32_t size) {
1a0003e2:	b570      	push	{r4, r5, r6, lr}
1a0003e4:	4604      	mov	r4, r0
1a0003e6:	460d      	mov	r5, r1
1a0003e8:	4616      	mov	r6, r2
	_ili9341_write_bytes_start(desc);
1a0003ea:	f7ff ffaa 	bl	1a000342 <_ili9341_write_bytes_start>
	err = _ili9341_write_bytes(desc, buffer, size);
1a0003ee:	4632      	mov	r2, r6
1a0003f0:	4629      	mov	r1, r5
1a0003f2:	4620      	mov	r0, r4
1a0003f4:	f7ff ffe4 	bl	1a0003c0 <_ili9341_write_bytes>
1a0003f8:	4605      	mov	r5, r0
	_ili9341_write_bytes_end(desc);
1a0003fa:	4620      	mov	r0, r4
1a0003fc:	f7ff ffaa 	bl	1a000354 <_ili9341_write_bytes_end>
}
1a000400:	4628      	mov	r0, r5
1a000402:	bd70      	pop	{r4, r5, r6, pc}

1a000404 <_ili9341_delay_ms>:

void _ili9341_delay_ms(const ili9341_desc_ptr_t desc, uint32_t time_ms) {
	desc->curr_time_cnt = 0;
1a000404:	2300      	movs	r3, #0
1a000406:	62c3      	str	r3, [r0, #44]	; 0x2c
	uint32_t timeout = 0;
	do {
		timeout = (desc->curr_time_cnt >= time_ms);
1a000408:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	} while(!timeout);
1a00040a:	428b      	cmp	r3, r1
1a00040c:	d3fc      	bcc.n	1a000408 <_ili9341_delay_ms+0x4>
}
1a00040e:	4770      	bx	lr

1a000410 <_ili9341_region_valid>:

bool _ili9341_region_valid(const coord_2d_t* top_left, const coord_2d_t* bottom_right) {
	return (top_left->x <= bottom_right->x && top_left->y <= bottom_right->y);
1a000410:	8802      	ldrh	r2, [r0, #0]
1a000412:	880b      	ldrh	r3, [r1, #0]
1a000414:	429a      	cmp	r2, r3
1a000416:	d805      	bhi.n	1a000424 <_ili9341_region_valid+0x14>
1a000418:	8842      	ldrh	r2, [r0, #2]
1a00041a:	884b      	ldrh	r3, [r1, #2]
1a00041c:	429a      	cmp	r2, r3
1a00041e:	d903      	bls.n	1a000428 <_ili9341_region_valid+0x18>
1a000420:	2000      	movs	r0, #0
1a000422:	4770      	bx	lr
1a000424:	2000      	movs	r0, #0
1a000426:	4770      	bx	lr
1a000428:	2001      	movs	r0, #1
}
1a00042a:	4770      	bx	lr

1a00042c <_ili9341_swap>:

void _ili9341_swap(uint16_t* v1, uint16_t* v2) {
	uint16_t tmp = *v1;
1a00042c:	8803      	ldrh	r3, [r0, #0]
	*v1 = *v2;
1a00042e:	880a      	ldrh	r2, [r1, #0]
1a000430:	8002      	strh	r2, [r0, #0]
	*v2 = tmp;
1a000432:	800b      	strh	r3, [r1, #0]
}
1a000434:	4770      	bx	lr

1a000436 <_ili9341_fix_region>:

void _ili9341_fix_region(coord_2d_t* top_left, coord_2d_t* bottom_right) {
1a000436:	b538      	push	{r3, r4, r5, lr}
1a000438:	4604      	mov	r4, r0
1a00043a:	460d      	mov	r5, r1
	if (top_left->x > bottom_right->x) {
1a00043c:	8802      	ldrh	r2, [r0, #0]
1a00043e:	880b      	ldrh	r3, [r1, #0]
1a000440:	429a      	cmp	r2, r3
1a000442:	d804      	bhi.n	1a00044e <_ili9341_fix_region+0x18>
		_ili9341_swap(&top_left->x, &bottom_right->x);
	}
	if (top_left->y > bottom_right->y) {
1a000444:	8862      	ldrh	r2, [r4, #2]
1a000446:	886b      	ldrh	r3, [r5, #2]
1a000448:	429a      	cmp	r2, r3
1a00044a:	d803      	bhi.n	1a000454 <_ili9341_fix_region+0x1e>
		_ili9341_swap(&top_left->y, &bottom_right->y);
	}
}
1a00044c:	bd38      	pop	{r3, r4, r5, pc}
		_ili9341_swap(&top_left->x, &bottom_right->x);
1a00044e:	f7ff ffed 	bl	1a00042c <_ili9341_swap>
1a000452:	e7f7      	b.n	1a000444 <_ili9341_fix_region+0xe>
		_ili9341_swap(&top_left->y, &bottom_right->y);
1a000454:	1ca9      	adds	r1, r5, #2
1a000456:	1ca0      	adds	r0, r4, #2
1a000458:	f7ff ffe8 	bl	1a00042c <_ili9341_swap>
}
1a00045c:	e7f6      	b.n	1a00044c <_ili9341_fix_region+0x16>
1a00045e:	Address 0x1a00045e is out of bounds.


1a000460 <ili9341_get_default_hw_cfg>:

/* Public interface methods. */

ili9341_hw_cfg_t ili9341_get_default_hw_cfg() {
1a000460:	b470      	push	{r4, r5, r6}
1a000462:	b095      	sub	sp, #84	; 0x54
1a000464:	4604      	mov	r4, r0
	ili9341_hw_cfg_t def_cfg;
	uint8_t powctrla[] = {0x39, 0x2C, 0x00, 0x34, 0x02};
1a000466:	4d3f      	ldr	r5, [pc, #252]	; (1a000564 <ili9341_get_default_hw_cfg+0x104>)
1a000468:	6869      	ldr	r1, [r5, #4]
	memcpy(def_cfg.pwctrla.params, &powctrla, sizeof(ili9341_pwctrla_t));
1a00046a:	6828      	ldr	r0, [r5, #0]
1a00046c:	6020      	str	r0, [r4, #0]
1a00046e:	7121      	strb	r1, [r4, #4]
	uint8_t powctrlb[] = {0x00, 0xC1, 0x30};
1a000470:	68ab      	ldr	r3, [r5, #8]
1a000472:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
	memcpy(def_cfg.pwctrlb.params, &powctrlb, sizeof(ili9341_pwctrlb_t));
1a000476:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
1a00047a:	f3c3 4307 	ubfx	r3, r3, #16, #8
1a00047e:	f8a4 2005 	strh.w	r2, [r4, #5]
1a000482:	71e3      	strb	r3, [r4, #7]
	uint8_t timctrla[] = {0x85, 0x00, 0x78};
1a000484:	68eb      	ldr	r3, [r5, #12]
1a000486:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
	memcpy(def_cfg.timctrla.params, &timctrla, sizeof(ili9341_timctrla_t));
1a00048a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
1a00048e:	f3c3 4307 	ubfx	r3, r3, #16, #8
1a000492:	8122      	strh	r2, [r4, #8]
1a000494:	72a3      	strb	r3, [r4, #10]
	uint8_t timctrlb[] = {0xEA, 0x00, 0x00};
1a000496:	23ea      	movs	r3, #234	; 0xea
1a000498:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
1a00049c:	2200      	movs	r2, #0
1a00049e:	f88d 203d 	strb.w	r2, [sp, #61]	; 0x3d
	memcpy(def_cfg.timctrlb.params, &timctrlb, sizeof(ili9341_timctrlb_t));
1a0004a2:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
1a0004a6:	f8a4 100b 	strh.w	r1, [r4, #11]
1a0004aa:	7362      	strb	r2, [r4, #13]
	uint8_t ponseqctrl[] = {0x64, 0x03, 0x12, 0x81};
1a0004ac:	692b      	ldr	r3, [r5, #16]
	memcpy(def_cfg.ponseqctrl.params, &ponseqctrl, sizeof(ili9341_ponseqctrl_t));
1a0004ae:	f8c4 300e 	str.w	r3, [r4, #14]
	uint8_t pumpratctrl[] = {0x20};
	memcpy(def_cfg.pumpratctrl.params, &pumpratctrl, sizeof(ili9341_pumpratctrl_t));
1a0004b2:	2320      	movs	r3, #32
1a0004b4:	74a3      	strb	r3, [r4, #18]
	uint8_t pwctr1[] = {0x23};
	memcpy(def_cfg.pwctr1.params, &pwctr1, sizeof(ili9341_pwctr1_t));
1a0004b6:	2323      	movs	r3, #35	; 0x23
1a0004b8:	74e3      	strb	r3, [r4, #19]
	uint8_t pwctr2[] = {0x10};
	memcpy(def_cfg.pwctr2.params, &pwctr2, sizeof(ili9341_pwctr2_t));
1a0004ba:	2310      	movs	r3, #16
1a0004bc:	7523      	strb	r3, [r4, #20]
	uint8_t vmctr1[] = {0x3E, 0x28};
1a0004be:	8aab      	ldrh	r3, [r5, #20]
	memcpy(def_cfg.vmctr1.params, &vmctr1, sizeof(ili9341_vmctr1_t));
1a0004c0:	f8a4 3015 	strh.w	r3, [r4, #21]
	uint8_t vmctr2[] = {0x86};
	memcpy(def_cfg.vmctr2.params, &vmctr2, sizeof(ili9341_vmctr2_t));
1a0004c4:	2386      	movs	r3, #134	; 0x86
1a0004c6:	75e3      	strb	r3, [r4, #23]
	uint8_t madctl[] = {0x48};
	memcpy(def_cfg.madctl.params, &madctl, sizeof(ili9341_madctl_t));
1a0004c8:	2348      	movs	r3, #72	; 0x48
1a0004ca:	7623      	strb	r3, [r4, #24]
	uint8_t pixfmt[] = {0x55};
	memcpy(def_cfg.pixfmt.params, &pixfmt, sizeof(ili9341_pixfmt_t));
1a0004cc:	2355      	movs	r3, #85	; 0x55
1a0004ce:	7663      	strb	r3, [r4, #25]
	uint8_t frmctr1[] = {0x00, 0x18};
1a0004d0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
1a0004d4:	2318      	movs	r3, #24
1a0004d6:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
	memcpy(def_cfg.frmctr1.params, &frmctr1, sizeof(ili9341_frmctr1_t));
1a0004da:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
1a0004de:	8363      	strh	r3, [r4, #26]
	uint8_t dfunctr[] = {0x08, 0x82, 0x27};
1a0004e0:	69ab      	ldr	r3, [r5, #24]
1a0004e2:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
1a0004e6:	0c1b      	lsrs	r3, r3, #16
1a0004e8:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	memcpy(def_cfg.dfunctr.params, &dfunctr, sizeof(ili9341_dfunctr_t));
1a0004ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a0004ee:	61e3      	str	r3, [r4, #28]
	uint8_t g3enable[] = {0x00};
	memcpy(def_cfg.g3enable.params, &g3enable, sizeof(ili9341_3genable_t));
1a0004f0:	f884 2020 	strb.w	r2, [r4, #32]
	uint8_t gammaset[] = {0x01};
1a0004f4:	2301      	movs	r3, #1
	memcpy(def_cfg.gammaset.params, &gammaset, sizeof(ili9341_gammaset_t));
1a0004f6:	f88d 3004 	strb.w	r3, [sp, #4]
1a0004fa:	f8bd 3004 	ldrh.w	r3, [sp, #4]
1a0004fe:	f8a4 3021 	strh.w	r3, [r4, #33]	; 0x21
	uint8_t gmctrp1[] = {0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1, 0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00};
1a000502:	ae07      	add	r6, sp, #28
1a000504:	f105 031c 	add.w	r3, r5, #28
1a000508:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
1a00050a:	c607      	stmia	r6!, {r0, r1, r2}
1a00050c:	f826 3b02 	strh.w	r3, [r6], #2
1a000510:	0c1b      	lsrs	r3, r3, #16
1a000512:	7033      	strb	r3, [r6, #0]
	memcpy(def_cfg.gmctrp1.params, &gmctrp1, sizeof(ili9341_gmctrp1_t));
1a000514:	ab07      	add	r3, sp, #28
1a000516:	cb07      	ldmia	r3!, {r0, r1, r2}
1a000518:	f8c4 0023 	str.w	r0, [r4, #35]	; 0x23
1a00051c:	f8c4 1027 	str.w	r1, [r4, #39]	; 0x27
1a000520:	f8c4 202b 	str.w	r2, [r4, #43]	; 0x2b
1a000524:	881a      	ldrh	r2, [r3, #0]
1a000526:	789b      	ldrb	r3, [r3, #2]
1a000528:	f8a4 202f 	strh.w	r2, [r4, #47]	; 0x2f
1a00052c:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	uint8_t gmctrn1[] = {0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1, 0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F};
1a000530:	ae03      	add	r6, sp, #12
1a000532:	352c      	adds	r5, #44	; 0x2c
1a000534:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000538:	c607      	stmia	r6!, {r0, r1, r2}
1a00053a:	f826 3b02 	strh.w	r3, [r6], #2
1a00053e:	0c1b      	lsrs	r3, r3, #16
1a000540:	7033      	strb	r3, [r6, #0]
	memcpy(def_cfg.gmctrn1.params, &gmctrn1, sizeof(ili9341_gmctrn1_t));
1a000542:	ab03      	add	r3, sp, #12
1a000544:	cb07      	ldmia	r3!, {r0, r1, r2}
1a000546:	f8c4 0032 	str.w	r0, [r4, #50]	; 0x32
1a00054a:	f8c4 1036 	str.w	r1, [r4, #54]	; 0x36
1a00054e:	f8c4 203a 	str.w	r2, [r4, #58]	; 0x3a
1a000552:	881a      	ldrh	r2, [r3, #0]
1a000554:	789b      	ldrb	r3, [r3, #2]
1a000556:	87e2      	strh	r2, [r4, #62]	; 0x3e
1a000558:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40

	return def_cfg;
}
1a00055c:	4620      	mov	r0, r4
1a00055e:	b015      	add	sp, #84	; 0x54
1a000560:	bc70      	pop	{r4, r5, r6}
1a000562:	4770      	bx	lr
1a000564:	1a0020e8 	.word	0x1a0020e8

1a000568 <ili9341_set_orientation>:
	  }

	  return driver_desc;
}

int ili9341_set_orientation(const ili9341_desc_ptr_t desc, ili9341_orientation_t orientation) {
1a000568:	b530      	push	{r4, r5, lr}
1a00056a:	b083      	sub	sp, #12
1a00056c:	4604      	mov	r4, r0
	int err = ILI9341_SUCCESS;
	ili9341_madctl_t madctl;
	madctl.params[0] = 0x00;
1a00056e:	2300      	movs	r3, #0
1a000570:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (orientation) {
1a000574:	2903      	cmp	r1, #3
1a000576:	d83a      	bhi.n	1a0005ee <ili9341_set_orientation+0x86>
1a000578:	e8df f001 	tbb	[pc, r1]
1a00057c:	152d0221 	.word	0x152d0221
	case ILI9341_ORIENTATION_VERTICAL:
		err |= _ili9341_write_cmd(desc, ILI9341_CMD_MADCTL);
1a000580:	2136      	movs	r1, #54	; 0x36
1a000582:	f7ff fefe 	bl	1a000382 <_ili9341_write_cmd>
1a000586:	4605      	mov	r5, r0
		desc->current_width = desc->default_height;
1a000588:	8863      	ldrh	r3, [r4, #2]
1a00058a:	80a3      	strh	r3, [r4, #4]
		desc->current_height = desc->default_width;
1a00058c:	8823      	ldrh	r3, [r4, #0]
1a00058e:	80e3      	strh	r3, [r4, #6]
		madctl.params[0] = 0x40|0x08;
1a000590:	2348      	movs	r3, #72	; 0x48
1a000592:	f88d 3004 	strb.w	r3, [sp, #4]
	default:
		err = -ILI9341_ERR_INV_PARAM;
		break;
	}

	err |= _ili9341_write_data(desc, madctl.params, sizeof(madctl));
1a000596:	2201      	movs	r2, #1
1a000598:	a901      	add	r1, sp, #4
1a00059a:	4620      	mov	r0, r4
1a00059c:	f7ff ff21 	bl	1a0003e2 <_ili9341_write_data>

	return err;
}
1a0005a0:	4328      	orrs	r0, r5
1a0005a2:	b003      	add	sp, #12
1a0005a4:	bd30      	pop	{r4, r5, pc}
		err |= _ili9341_write_cmd(desc, ILI9341_CMD_MADCTL);
1a0005a6:	2136      	movs	r1, #54	; 0x36
1a0005a8:	f7ff feeb 	bl	1a000382 <_ili9341_write_cmd>
1a0005ac:	4605      	mov	r5, r0
		desc->current_width = desc->default_height;
1a0005ae:	8863      	ldrh	r3, [r4, #2]
1a0005b0:	80a3      	strh	r3, [r4, #4]
		desc->current_height = desc->default_width;
1a0005b2:	8823      	ldrh	r3, [r4, #0]
1a0005b4:	80e3      	strh	r3, [r4, #6]
		madctl.params[0] = 0x80|0x08;
1a0005b6:	2388      	movs	r3, #136	; 0x88
1a0005b8:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
1a0005bc:	e7eb      	b.n	1a000596 <ili9341_set_orientation+0x2e>
		err |= _ili9341_write_cmd(desc, ILI9341_CMD_MADCTL);
1a0005be:	2136      	movs	r1, #54	; 0x36
1a0005c0:	f7ff fedf 	bl	1a000382 <_ili9341_write_cmd>
1a0005c4:	4605      	mov	r5, r0
		desc->current_width = desc->default_width;
1a0005c6:	8823      	ldrh	r3, [r4, #0]
1a0005c8:	80a3      	strh	r3, [r4, #4]
		desc->current_height = desc->default_height;
1a0005ca:	8863      	ldrh	r3, [r4, #2]
1a0005cc:	80e3      	strh	r3, [r4, #6]
		madctl.params[0] = 0x20|0x08;
1a0005ce:	2328      	movs	r3, #40	; 0x28
1a0005d0:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
1a0005d4:	e7df      	b.n	1a000596 <ili9341_set_orientation+0x2e>
		err |= _ili9341_write_cmd(desc, ILI9341_CMD_MADCTL);
1a0005d6:	2136      	movs	r1, #54	; 0x36
1a0005d8:	f7ff fed3 	bl	1a000382 <_ili9341_write_cmd>
1a0005dc:	4605      	mov	r5, r0
		desc->current_width = desc->default_width;
1a0005de:	8823      	ldrh	r3, [r4, #0]
1a0005e0:	80a3      	strh	r3, [r4, #4]
		desc->current_height = desc->default_height;
1a0005e2:	8863      	ldrh	r3, [r4, #2]
1a0005e4:	80e3      	strh	r3, [r4, #6]
		madctl.params[0] = 0x40|0x80|0x20|0x08;
1a0005e6:	23e8      	movs	r3, #232	; 0xe8
1a0005e8:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
1a0005ec:	e7d3      	b.n	1a000596 <ili9341_set_orientation+0x2e>
		err = -ILI9341_ERR_INV_PARAM;
1a0005ee:	f06f 0501 	mvn.w	r5, #1
1a0005f2:	e7d0      	b.n	1a000596 <ili9341_set_orientation+0x2e>

1a0005f4 <ili9341_set_region>:

int ili9341_set_region(const ili9341_desc_ptr_t desc, coord_2d_t top_left, coord_2d_t bottom_right) {
1a0005f4:	b530      	push	{r4, r5, lr}
1a0005f6:	b085      	sub	sp, #20
1a0005f8:	4605      	mov	r5, r0
1a0005fa:	9101      	str	r1, [sp, #4]
1a0005fc:	9200      	str	r2, [sp, #0]
	int err = ILI9341_SUCCESS;
	if (!_ili9341_region_valid(&top_left, &bottom_right)) {
1a0005fe:	4669      	mov	r1, sp
1a000600:	a801      	add	r0, sp, #4
1a000602:	f7ff ff05 	bl	1a000410 <_ili9341_region_valid>
1a000606:	2800      	cmp	r0, #0
1a000608:	d03c      	beq.n	1a000684 <ili9341_set_region+0x90>
		_ili9341_fix_region(&top_left, &bottom_right);
	}

	desc->region_top_left = top_left;
1a00060a:	9b01      	ldr	r3, [sp, #4]
1a00060c:	632b      	str	r3, [r5, #48]	; 0x30
	desc->region_bottom_right = bottom_right;
1a00060e:	9b00      	ldr	r3, [sp, #0]
1a000610:	636b      	str	r3, [r5, #52]	; 0x34

	err |= _ili9341_write_cmd(desc, ILI9341_CMD_CASET);
1a000612:	212a      	movs	r1, #42	; 0x2a
1a000614:	4628      	mov	r0, r5
1a000616:	f7ff feb4 	bl	1a000382 <_ili9341_write_cmd>
1a00061a:	4604      	mov	r4, r0
	ili9341_caset_t caset;
	caset.fields.sc_h = top_left.x >> 8;
1a00061c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
1a000620:	0a1a      	lsrs	r2, r3, #8
1a000622:	f88d 200c 	strb.w	r2, [sp, #12]
	caset.fields.sc_l = top_left.x;
1a000626:	f88d 300d 	strb.w	r3, [sp, #13]
	caset.fields.ec_h = bottom_right.x >> 8;
1a00062a:	f8bd 3000 	ldrh.w	r3, [sp]
1a00062e:	0a1a      	lsrs	r2, r3, #8
1a000630:	f88d 200e 	strb.w	r2, [sp, #14]
	caset.fields.ec_l = bottom_right.x;
1a000634:	f88d 300f 	strb.w	r3, [sp, #15]
	err |= _ili9341_write_data(desc, caset.params, sizeof(caset));
1a000638:	2204      	movs	r2, #4
1a00063a:	a903      	add	r1, sp, #12
1a00063c:	4628      	mov	r0, r5
1a00063e:	f7ff fed0 	bl	1a0003e2 <_ili9341_write_data>
1a000642:	4304      	orrs	r4, r0
	err |= _ili9341_write_cmd(desc, ILI9341_CMD_PASET);
1a000644:	212b      	movs	r1, #43	; 0x2b
1a000646:	4628      	mov	r0, r5
1a000648:	f7ff fe9b 	bl	1a000382 <_ili9341_write_cmd>
1a00064c:	4304      	orrs	r4, r0

	ili9341_paset_t paset;
	paset.fields.sp_h = top_left.y >> 8;
1a00064e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
1a000652:	0a1a      	lsrs	r2, r3, #8
1a000654:	f88d 2008 	strb.w	r2, [sp, #8]
	paset.fields.sp_l = top_left.y;
1a000658:	f88d 3009 	strb.w	r3, [sp, #9]
	paset.fields.ep_h = bottom_right.y >> 8;
1a00065c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
1a000660:	0a1a      	lsrs	r2, r3, #8
1a000662:	f88d 200a 	strb.w	r2, [sp, #10]
	paset.fields.ep_l = bottom_right.y;
1a000666:	f88d 300b 	strb.w	r3, [sp, #11]
	err |= _ili9341_write_data(desc, paset.params, sizeof(paset));
1a00066a:	2204      	movs	r2, #4
1a00066c:	a902      	add	r1, sp, #8
1a00066e:	4628      	mov	r0, r5
1a000670:	f7ff feb7 	bl	1a0003e2 <_ili9341_write_data>
1a000674:	4304      	orrs	r4, r0
	err |= _ili9341_write_cmd(desc, ILI9341_CMD_RAMWR);
1a000676:	212c      	movs	r1, #44	; 0x2c
1a000678:	4628      	mov	r0, r5
1a00067a:	f7ff fe82 	bl	1a000382 <_ili9341_write_cmd>

	return err;
}
1a00067e:	4320      	orrs	r0, r4
1a000680:	b005      	add	sp, #20
1a000682:	bd30      	pop	{r4, r5, pc}
		_ili9341_fix_region(&top_left, &bottom_right);
1a000684:	4669      	mov	r1, sp
1a000686:	a801      	add	r0, sp, #4
1a000688:	f7ff fed5 	bl	1a000436 <_ili9341_fix_region>
1a00068c:	e7bd      	b.n	1a00060a <ili9341_set_region+0x16>

1a00068e <_ili9341_init_display>:
int _ili9341_init_display(const ili9341_desc_ptr_t desc, const ili9341_hw_cfg_t* hw_cfg) {
1a00068e:	b570      	push	{r4, r5, r6, lr}
1a000690:	b082      	sub	sp, #8
1a000692:	4605      	mov	r5, r0
1a000694:	460e      	mov	r6, r1
	_ili9341_enable(desc);
1a000696:	f7ff fe4f 	bl	1a000338 <_ili9341_enable>
	err |= _ili9341_write_cmd(desc, ILI9341_CMD_SWRESET);
1a00069a:	2101      	movs	r1, #1
1a00069c:	4628      	mov	r0, r5
1a00069e:	f7ff fe70 	bl	1a000382 <_ili9341_write_cmd>
1a0006a2:	4604      	mov	r4, r0
	_ili9341_delay_ms(desc, desc->restart_delay_ms);
1a0006a4:	6a69      	ldr	r1, [r5, #36]	; 0x24
1a0006a6:	4628      	mov	r0, r5
1a0006a8:	f7ff feac 	bl	1a000404 <_ili9341_delay_ms>
	err |= _ili9341_write_cmd(desc, ILI9341_CMD_PWCTRLA);
1a0006ac:	21cb      	movs	r1, #203	; 0xcb
1a0006ae:	4628      	mov	r0, r5
1a0006b0:	f7ff fe67 	bl	1a000382 <_ili9341_write_cmd>
1a0006b4:	4304      	orrs	r4, r0
	err |= _ili9341_write_data(desc, hw_cfg->pwctrla.params, sizeof(hw_cfg->pwctrla));
1a0006b6:	2205      	movs	r2, #5
1a0006b8:	4631      	mov	r1, r6
1a0006ba:	4628      	mov	r0, r5
1a0006bc:	f7ff fe91 	bl	1a0003e2 <_ili9341_write_data>
1a0006c0:	4304      	orrs	r4, r0
	err |= _ili9341_write_cmd(desc, ILI9341_CMD_PWCTRLB);
1a0006c2:	21cf      	movs	r1, #207	; 0xcf
1a0006c4:	4628      	mov	r0, r5
1a0006c6:	f7ff fe5c 	bl	1a000382 <_ili9341_write_cmd>
1a0006ca:	4304      	orrs	r4, r0
	err |= _ili9341_write_data(desc, hw_cfg->pwctrlb.params, sizeof(hw_cfg->pwctrlb));
1a0006cc:	2203      	movs	r2, #3
1a0006ce:	1d71      	adds	r1, r6, #5
1a0006d0:	4628      	mov	r0, r5
1a0006d2:	f7ff fe86 	bl	1a0003e2 <_ili9341_write_data>
1a0006d6:	4304      	orrs	r4, r0
	err |= _ili9341_write_cmd(desc, ILI9341_CMD_TIMCTRLA);
1a0006d8:	21e8      	movs	r1, #232	; 0xe8
1a0006da:	4628      	mov	r0, r5
1a0006dc:	f7ff fe51 	bl	1a000382 <_ili9341_write_cmd>
1a0006e0:	4304      	orrs	r4, r0
	err |= _ili9341_write_data(desc, hw_cfg->timctrla.params, sizeof(hw_cfg->timctrla));
1a0006e2:	2203      	movs	r2, #3
1a0006e4:	f106 0108 	add.w	r1, r6, #8
1a0006e8:	4628      	mov	r0, r5
1a0006ea:	f7ff fe7a 	bl	1a0003e2 <_ili9341_write_data>
1a0006ee:	4304      	orrs	r4, r0
	err |= _ili9341_write_cmd(desc, ILI9341_CMD_TIMCTRLB);
1a0006f0:	21ea      	movs	r1, #234	; 0xea
1a0006f2:	4628      	mov	r0, r5
1a0006f4:	f7ff fe45 	bl	1a000382 <_ili9341_write_cmd>
1a0006f8:	4304      	orrs	r4, r0
	err |= _ili9341_write_data(desc, hw_cfg->timctrlb.params, sizeof(hw_cfg->timctrlb));
1a0006fa:	2203      	movs	r2, #3
1a0006fc:	f106 010b 	add.w	r1, r6, #11
1a000700:	4628      	mov	r0, r5
1a000702:	f7ff fe6e 	bl	1a0003e2 <_ili9341_write_data>
1a000706:	4304      	orrs	r4, r0
	err |= _ili9341_write_cmd(desc, ILI9341_CMD_PONSEQCTRL);
1a000708:	21ed      	movs	r1, #237	; 0xed
1a00070a:	4628      	mov	r0, r5
1a00070c:	f7ff fe39 	bl	1a000382 <_ili9341_write_cmd>
1a000710:	4304      	orrs	r4, r0
	err |= _ili9341_write_data(desc, hw_cfg->ponseqctrl.params, sizeof(hw_cfg->ponseqctrl));
1a000712:	2204      	movs	r2, #4
1a000714:	f106 010e 	add.w	r1, r6, #14
1a000718:	4628      	mov	r0, r5
1a00071a:	f7ff fe62 	bl	1a0003e2 <_ili9341_write_data>
1a00071e:	4304      	orrs	r4, r0
	err |= _ili9341_write_cmd(desc, ILI9341_CMD_PUMPRATCTRL);
1a000720:	21f7      	movs	r1, #247	; 0xf7
1a000722:	4628      	mov	r0, r5
1a000724:	f7ff fe2d 	bl	1a000382 <_ili9341_write_cmd>
1a000728:	4304      	orrs	r4, r0
	err |= _ili9341_write_data(desc, hw_cfg->pumpratctrl.params, sizeof(hw_cfg->pumpratctrl));
1a00072a:	2201      	movs	r2, #1
1a00072c:	f106 0112 	add.w	r1, r6, #18
1a000730:	4628      	mov	r0, r5
1a000732:	f7ff fe56 	bl	1a0003e2 <_ili9341_write_data>
1a000736:	4304      	orrs	r4, r0
	err |= _ili9341_write_cmd(desc, ILI9341_CMD_PWCTR1);
1a000738:	21c0      	movs	r1, #192	; 0xc0
1a00073a:	4628      	mov	r0, r5
1a00073c:	f7ff fe21 	bl	1a000382 <_ili9341_write_cmd>
1a000740:	4304      	orrs	r4, r0
	err |= _ili9341_write_data(desc, hw_cfg->pwctr1.params, sizeof(hw_cfg->pwctr1));
1a000742:	2201      	movs	r2, #1
1a000744:	f106 0113 	add.w	r1, r6, #19
1a000748:	4628      	mov	r0, r5
1a00074a:	f7ff fe4a 	bl	1a0003e2 <_ili9341_write_data>
1a00074e:	4304      	orrs	r4, r0
	err |= _ili9341_write_cmd(desc, ILI9341_CMD_PWCTR2);
1a000750:	21c1      	movs	r1, #193	; 0xc1
1a000752:	4628      	mov	r0, r5
1a000754:	f7ff fe15 	bl	1a000382 <_ili9341_write_cmd>
1a000758:	4304      	orrs	r4, r0
	err |= _ili9341_write_data(desc, hw_cfg->pwctr2.params, sizeof(hw_cfg->pwctr2));
1a00075a:	2201      	movs	r2, #1
1a00075c:	f106 0114 	add.w	r1, r6, #20
1a000760:	4628      	mov	r0, r5
1a000762:	f7ff fe3e 	bl	1a0003e2 <_ili9341_write_data>
1a000766:	4304      	orrs	r4, r0
	err |= _ili9341_write_cmd(desc, ILI9341_CMD_VMCTR1);
1a000768:	21c5      	movs	r1, #197	; 0xc5
1a00076a:	4628      	mov	r0, r5
1a00076c:	f7ff fe09 	bl	1a000382 <_ili9341_write_cmd>
1a000770:	4304      	orrs	r4, r0
	err |= _ili9341_write_data(desc, hw_cfg->vmctr1.params, sizeof(hw_cfg->vmctr1));
1a000772:	2202      	movs	r2, #2
1a000774:	f106 0115 	add.w	r1, r6, #21
1a000778:	4628      	mov	r0, r5
1a00077a:	f7ff fe32 	bl	1a0003e2 <_ili9341_write_data>
1a00077e:	4304      	orrs	r4, r0
	err |= _ili9341_write_cmd(desc, ILI9341_CMD_VMCTR2);
1a000780:	21c7      	movs	r1, #199	; 0xc7
1a000782:	4628      	mov	r0, r5
1a000784:	f7ff fdfd 	bl	1a000382 <_ili9341_write_cmd>
1a000788:	4304      	orrs	r4, r0
	err |= _ili9341_write_data(desc, hw_cfg->vmctr2.params, sizeof(hw_cfg->vmctr2));
1a00078a:	2201      	movs	r2, #1
1a00078c:	f106 0117 	add.w	r1, r6, #23
1a000790:	4628      	mov	r0, r5
1a000792:	f7ff fe26 	bl	1a0003e2 <_ili9341_write_data>
1a000796:	4304      	orrs	r4, r0
	err |= _ili9341_write_cmd(desc, ILI9341_CMD_MADCTL);
1a000798:	2136      	movs	r1, #54	; 0x36
1a00079a:	4628      	mov	r0, r5
1a00079c:	f7ff fdf1 	bl	1a000382 <_ili9341_write_cmd>
1a0007a0:	4304      	orrs	r4, r0
	err |= _ili9341_write_data(desc, hw_cfg->madctl.params, sizeof(hw_cfg->madctl));
1a0007a2:	2201      	movs	r2, #1
1a0007a4:	f106 0118 	add.w	r1, r6, #24
1a0007a8:	4628      	mov	r0, r5
1a0007aa:	f7ff fe1a 	bl	1a0003e2 <_ili9341_write_data>
1a0007ae:	4304      	orrs	r4, r0
	err |= _ili9341_write_cmd(desc, ILI9341_CMD_PIXFMT);
1a0007b0:	213a      	movs	r1, #58	; 0x3a
1a0007b2:	4628      	mov	r0, r5
1a0007b4:	f7ff fde5 	bl	1a000382 <_ili9341_write_cmd>
1a0007b8:	4304      	orrs	r4, r0
	err |= _ili9341_write_data(desc, hw_cfg->pixfmt.params, sizeof(hw_cfg->pixfmt));
1a0007ba:	2201      	movs	r2, #1
1a0007bc:	f106 0119 	add.w	r1, r6, #25
1a0007c0:	4628      	mov	r0, r5
1a0007c2:	f7ff fe0e 	bl	1a0003e2 <_ili9341_write_data>
1a0007c6:	4304      	orrs	r4, r0
	err |= _ili9341_write_cmd(desc, ILI9341_CMD_FRMCTR1);
1a0007c8:	21b1      	movs	r1, #177	; 0xb1
1a0007ca:	4628      	mov	r0, r5
1a0007cc:	f7ff fdd9 	bl	1a000382 <_ili9341_write_cmd>
1a0007d0:	4304      	orrs	r4, r0
	err |= _ili9341_write_data(desc, hw_cfg->frmctr1.params, sizeof(hw_cfg->frmctr1));
1a0007d2:	2202      	movs	r2, #2
1a0007d4:	f106 011a 	add.w	r1, r6, #26
1a0007d8:	4628      	mov	r0, r5
1a0007da:	f7ff fe02 	bl	1a0003e2 <_ili9341_write_data>
1a0007de:	4304      	orrs	r4, r0
	err |= _ili9341_write_cmd(desc, ILI9341_CMD_DFUNCTR);
1a0007e0:	21b6      	movs	r1, #182	; 0xb6
1a0007e2:	4628      	mov	r0, r5
1a0007e4:	f7ff fdcd 	bl	1a000382 <_ili9341_write_cmd>
1a0007e8:	4304      	orrs	r4, r0
	err |= _ili9341_write_data(desc, hw_cfg->dfunctr.params, sizeof(hw_cfg->dfunctr));
1a0007ea:	2204      	movs	r2, #4
1a0007ec:	f106 011c 	add.w	r1, r6, #28
1a0007f0:	4628      	mov	r0, r5
1a0007f2:	f7ff fdf6 	bl	1a0003e2 <_ili9341_write_data>
1a0007f6:	4304      	orrs	r4, r0
	err |= _ili9341_write_cmd(desc, ILI9341_CMD_3GENABLE);
1a0007f8:	21f2      	movs	r1, #242	; 0xf2
1a0007fa:	4628      	mov	r0, r5
1a0007fc:	f7ff fdc1 	bl	1a000382 <_ili9341_write_cmd>
1a000800:	4304      	orrs	r4, r0
	err |= _ili9341_write_data(desc, hw_cfg->g3enable.params, sizeof(hw_cfg->g3enable));
1a000802:	2201      	movs	r2, #1
1a000804:	f106 0120 	add.w	r1, r6, #32
1a000808:	4628      	mov	r0, r5
1a00080a:	f7ff fdea 	bl	1a0003e2 <_ili9341_write_data>
1a00080e:	4304      	orrs	r4, r0
	err |= _ili9341_write_cmd(desc, ILI9341_CMD_GAMMASET);
1a000810:	2126      	movs	r1, #38	; 0x26
1a000812:	4628      	mov	r0, r5
1a000814:	f7ff fdb5 	bl	1a000382 <_ili9341_write_cmd>
1a000818:	4304      	orrs	r4, r0
	err |= _ili9341_write_data(desc, hw_cfg->gammaset.params, sizeof(hw_cfg->gammaset));
1a00081a:	2202      	movs	r2, #2
1a00081c:	f106 0121 	add.w	r1, r6, #33	; 0x21
1a000820:	4628      	mov	r0, r5
1a000822:	f7ff fdde 	bl	1a0003e2 <_ili9341_write_data>
1a000826:	4304      	orrs	r4, r0
	err |= _ili9341_write_cmd(desc, ILI9341_CMD_GMCTRP1);
1a000828:	21e0      	movs	r1, #224	; 0xe0
1a00082a:	4628      	mov	r0, r5
1a00082c:	f7ff fda9 	bl	1a000382 <_ili9341_write_cmd>
1a000830:	4304      	orrs	r4, r0
	err |= _ili9341_write_data(desc, hw_cfg->gmctrp1.params, sizeof(hw_cfg->gmctrp1));
1a000832:	220f      	movs	r2, #15
1a000834:	f106 0123 	add.w	r1, r6, #35	; 0x23
1a000838:	4628      	mov	r0, r5
1a00083a:	f7ff fdd2 	bl	1a0003e2 <_ili9341_write_data>
1a00083e:	4304      	orrs	r4, r0
	err |= _ili9341_write_cmd(desc, ILI9341_CMD_GMCTRN1);
1a000840:	21e1      	movs	r1, #225	; 0xe1
1a000842:	4628      	mov	r0, r5
1a000844:	f7ff fd9d 	bl	1a000382 <_ili9341_write_cmd>
1a000848:	4304      	orrs	r4, r0
	err |= _ili9341_write_data(desc, hw_cfg->gmctrn1.params, sizeof(hw_cfg->gmctrn1));
1a00084a:	220f      	movs	r2, #15
1a00084c:	f106 0132 	add.w	r1, r6, #50	; 0x32
1a000850:	4628      	mov	r0, r5
1a000852:	f7ff fdc6 	bl	1a0003e2 <_ili9341_write_data>
1a000856:	4304      	orrs	r4, r0
	err |= _ili9341_write_cmd(desc, ILI9341_CMD_SLPOUT);
1a000858:	2111      	movs	r1, #17
1a00085a:	4628      	mov	r0, r5
1a00085c:	f7ff fd91 	bl	1a000382 <_ili9341_write_cmd>
1a000860:	4304      	orrs	r4, r0
	_ili9341_delay_ms(desc, desc->wup_delay_ms);
1a000862:	6aa9      	ldr	r1, [r5, #40]	; 0x28
1a000864:	4628      	mov	r0, r5
1a000866:	f7ff fdcd 	bl	1a000404 <_ili9341_delay_ms>
	err |= _ili9341_write_cmd(desc, ILI9341_CMD_DISPON);
1a00086a:	2129      	movs	r1, #41	; 0x29
1a00086c:	4628      	mov	r0, r5
1a00086e:	f7ff fd88 	bl	1a000382 <_ili9341_write_cmd>
1a000872:	4304      	orrs	r4, r0
	err |= ili9341_set_orientation(desc, desc->default_orientation);
1a000874:	7a29      	ldrb	r1, [r5, #8]
1a000876:	4628      	mov	r0, r5
1a000878:	f7ff fe76 	bl	1a000568 <ili9341_set_orientation>
1a00087c:	4304      	orrs	r4, r0
	coord_2d_t top_left = {.x = 0, .y = 0};
1a00087e:	2300      	movs	r3, #0
1a000880:	f8ad 3004 	strh.w	r3, [sp, #4]
1a000884:	f8ad 3006 	strh.w	r3, [sp, #6]
	coord_2d_t bottom_right = {.x = desc->current_width, .y = desc->current_height};
1a000888:	88ab      	ldrh	r3, [r5, #4]
1a00088a:	f8ad 3000 	strh.w	r3, [sp]
1a00088e:	88eb      	ldrh	r3, [r5, #6]
1a000890:	f8ad 3002 	strh.w	r3, [sp, #2]
	err |= ili9341_set_region(desc, top_left, bottom_right);
1a000894:	9a00      	ldr	r2, [sp, #0]
1a000896:	9901      	ldr	r1, [sp, #4]
1a000898:	4628      	mov	r0, r5
1a00089a:	f7ff feab 	bl	1a0005f4 <ili9341_set_region>
}
1a00089e:	4320      	orrs	r0, r4
1a0008a0:	b002      	add	sp, #8
1a0008a2:	bd70      	pop	{r4, r5, r6, pc}

1a0008a4 <ili9341_init>:
ili9341_desc_ptr_t ili9341_init(const ili9341_cfg_t* cfg, const ili9341_hw_cfg_t* hw_cfg) {
1a0008a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	  if (cfg == NULL ||
1a0008a6:	2800      	cmp	r0, #0
1a0008a8:	d042      	beq.n	1a000930 <ili9341_init+0x8c>
1a0008aa:	4603      	mov	r3, r0
		  cfg->spi_tx_dma == NULL ||
1a0008ac:	6882      	ldr	r2, [r0, #8]
	  if (cfg == NULL ||
1a0008ae:	2a00      	cmp	r2, #0
1a0008b0:	d040      	beq.n	1a000934 <ili9341_init+0x90>
		  cfg->spi_tx_ready == NULL ||
1a0008b2:	68c2      	ldr	r2, [r0, #12]
		  cfg->spi_tx_dma == NULL ||
1a0008b4:	2a00      	cmp	r2, #0
1a0008b6:	d03f      	beq.n	1a000938 <ili9341_init+0x94>
		  cfg->rst_pin == NULL ||
1a0008b8:	6902      	ldr	r2, [r0, #16]
		  cfg->spi_tx_ready == NULL ||
1a0008ba:	2a00      	cmp	r2, #0
1a0008bc:	d03e      	beq.n	1a00093c <ili9341_init+0x98>
		  cfg->cs_pin == NULL ||
1a0008be:	6942      	ldr	r2, [r0, #20]
		  cfg->rst_pin == NULL ||
1a0008c0:	2a00      	cmp	r2, #0
1a0008c2:	d03d      	beq.n	1a000940 <ili9341_init+0x9c>
		  cfg->dc_pin == NULL) {
1a0008c4:	6982      	ldr	r2, [r0, #24]
		  cfg->cs_pin == NULL ||
1a0008c6:	2a00      	cmp	r2, #0
1a0008c8:	d03c      	beq.n	1a000944 <ili9341_init+0xa0>
	  if (hw_cfg == NULL) {
1a0008ca:	2900      	cmp	r1, #0
1a0008cc:	d03c      	beq.n	1a000948 <ili9341_init+0xa4>
	  if (ili9341_drivers_pool.current_driver >= ILI9341_MAX_DRIVERS_CNT) {
1a0008ce:	4a21      	ldr	r2, [pc, #132]	; (1a000954 <ili9341_init+0xb0>)
1a0008d0:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
1a0008d4:	2a01      	cmp	r2, #1
1a0008d6:	d839      	bhi.n	1a00094c <ili9341_init+0xa8>
	  ili9341_desc_ptr_t driver_desc = &ili9341_drivers_pool.drivers[ili9341_drivers_pool.current_driver++];
1a0008d8:	481e      	ldr	r0, [pc, #120]	; (1a000954 <ili9341_init+0xb0>)
1a0008da:	1c54      	adds	r4, r2, #1
1a0008dc:	f880 4070 	strb.w	r4, [r0, #112]	; 0x70
1a0008e0:	00d5      	lsls	r5, r2, #3
1a0008e2:	1aac      	subs	r4, r5, r2
1a0008e4:	00e6      	lsls	r6, r4, #3
1a0008e6:	1984      	adds	r4, r0, r6
	  driver_desc->default_width = cfg->width;
1a0008e8:	881f      	ldrh	r7, [r3, #0]
1a0008ea:	5387      	strh	r7, [r0, r6]
	  driver_desc->default_height = cfg->height;
1a0008ec:	885e      	ldrh	r6, [r3, #2]
1a0008ee:	8066      	strh	r6, [r4, #2]
	  driver_desc->current_width = cfg->width;
1a0008f0:	881e      	ldrh	r6, [r3, #0]
1a0008f2:	80a6      	strh	r6, [r4, #4]
	  driver_desc->current_height = cfg->height;
1a0008f4:	885e      	ldrh	r6, [r3, #2]
1a0008f6:	80e6      	strh	r6, [r4, #6]
	  driver_desc->default_orientation = cfg->orientation;
1a0008f8:	791e      	ldrb	r6, [r3, #4]
1a0008fa:	7226      	strb	r6, [r4, #8]
	  driver_desc->current_orientation = cfg->orientation;
1a0008fc:	7266      	strb	r6, [r4, #9]
	  driver_desc->spi_tx_dma = cfg->spi_tx_dma;
1a0008fe:	689e      	ldr	r6, [r3, #8]
1a000900:	60e6      	str	r6, [r4, #12]
	  driver_desc->spi_tx_ready = cfg->spi_tx_ready;
1a000902:	68de      	ldr	r6, [r3, #12]
1a000904:	6126      	str	r6, [r4, #16]
	  driver_desc->rst_pin = cfg->rst_pin;
1a000906:	691e      	ldr	r6, [r3, #16]
1a000908:	6166      	str	r6, [r4, #20]
	  driver_desc->cs_pin = cfg->cs_pin;
1a00090a:	695e      	ldr	r6, [r3, #20]
1a00090c:	61a6      	str	r6, [r4, #24]
	  driver_desc->dc_pin = cfg->dc_pin;
1a00090e:	699e      	ldr	r6, [r3, #24]
1a000910:	61e6      	str	r6, [r4, #28]
	  driver_desc->timeout_ms = cfg->timeout_ms;
1a000912:	69de      	ldr	r6, [r3, #28]
1a000914:	6226      	str	r6, [r4, #32]
	  driver_desc->restart_delay_ms = cfg->restart_delay_ms;
1a000916:	6a1e      	ldr	r6, [r3, #32]
1a000918:	6266      	str	r6, [r4, #36]	; 0x24
	  driver_desc->wup_delay_ms = cfg->wup_delay_ms;
1a00091a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
1a00091c:	62a3      	str	r3, [r4, #40]	; 0x28
	  driver_desc->curr_time_cnt = 0;
1a00091e:	4620      	mov	r0, r4
1a000920:	2300      	movs	r3, #0
1a000922:	62e3      	str	r3, [r4, #44]	; 0x2c
	  if (_ili9341_init_display(driver_desc, hw_cfg) < 0) {
1a000924:	f7ff feb3 	bl	1a00068e <_ili9341_init_display>
1a000928:	2800      	cmp	r0, #0
1a00092a:	db11      	blt.n	1a000950 <ili9341_init+0xac>
}
1a00092c:	4620      	mov	r0, r4
1a00092e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	      return NULL;
1a000930:	2400      	movs	r4, #0
1a000932:	e7fb      	b.n	1a00092c <ili9341_init+0x88>
1a000934:	2400      	movs	r4, #0
1a000936:	e7f9      	b.n	1a00092c <ili9341_init+0x88>
1a000938:	2400      	movs	r4, #0
1a00093a:	e7f7      	b.n	1a00092c <ili9341_init+0x88>
1a00093c:	2400      	movs	r4, #0
1a00093e:	e7f5      	b.n	1a00092c <ili9341_init+0x88>
1a000940:	2400      	movs	r4, #0
1a000942:	e7f3      	b.n	1a00092c <ili9341_init+0x88>
1a000944:	2400      	movs	r4, #0
1a000946:	e7f1      	b.n	1a00092c <ili9341_init+0x88>
		  return NULL;
1a000948:	2400      	movs	r4, #0
1a00094a:	e7ef      	b.n	1a00092c <ili9341_init+0x88>
	      return NULL;
1a00094c:	2400      	movs	r4, #0
1a00094e:	e7ed      	b.n	1a00092c <ili9341_init+0x88>
		  return NULL;
1a000950:	2400      	movs	r4, #0
1a000952:	e7eb      	b.n	1a00092c <ili9341_init+0x88>
1a000954:	10000048 	.word	0x10000048

1a000958 <ili9341_1ms_timer_cb>:

	return -err;
}

void ili9341_1ms_timer_cb() {
	for (int i = 0; i < ili9341_drivers_pool.current_driver; i++) {
1a000958:	2300      	movs	r3, #0
1a00095a:	e008      	b.n	1a00096e <ili9341_1ms_timer_cb+0x16>
		ili9341_drivers_pool.drivers[i].curr_time_cnt++;
1a00095c:	00d9      	lsls	r1, r3, #3
1a00095e:	1ac9      	subs	r1, r1, r3
1a000960:	00c8      	lsls	r0, r1, #3
1a000962:	4a06      	ldr	r2, [pc, #24]	; (1a00097c <ili9341_1ms_timer_cb+0x24>)
1a000964:	4402      	add	r2, r0
1a000966:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
1a000968:	3101      	adds	r1, #1
1a00096a:	62d1      	str	r1, [r2, #44]	; 0x2c
	for (int i = 0; i < ili9341_drivers_pool.current_driver; i++) {
1a00096c:	3301      	adds	r3, #1
1a00096e:	4a03      	ldr	r2, [pc, #12]	; (1a00097c <ili9341_1ms_timer_cb+0x24>)
1a000970:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
1a000974:	429a      	cmp	r2, r3
1a000976:	dcf1      	bgt.n	1a00095c <ili9341_1ms_timer_cb+0x4>
	}
}
1a000978:	4770      	bx	lr
1a00097a:	bf00      	nop
1a00097c:	10000048 	.word	0x10000048

1a000980 <diskTickHook>:
}

/* 1MS Timer callback */

void diskTickHook(void *ptr)
{
1a000980:	b508      	push	{r3, lr}
	/* Update Display driver timers. */
	ili9341_1ms_timer_cb();
1a000982:	f7ff ffe9 	bl	1a000958 <ili9341_1ms_timer_cb>
}
1a000986:	bd08      	pop	{r3, pc}

1a000988 <ili9341_gpio_init>:
void ili9341_gpio_init(void){
1a000988:	b508      	push	{r3, lr}
    gpioConfig(CS_PIN, GPIO_OUTPUT);        //esto lo hice basándome en el ejemplo de examples>c>sapi>gpio>switches_leds
1a00098a:	2101      	movs	r1, #1
1a00098c:	2010      	movs	r0, #16
1a00098e:	f000 ffe7 	bl	1a001960 <gpioInit>
    gpioConfig(DC_PIN, GPIO_OUTPUT);
1a000992:	2101      	movs	r1, #1
1a000994:	2020      	movs	r0, #32
1a000996:	f000 ffe3 	bl	1a001960 <gpioInit>
    gpioConfig(RST_PIN, GPIO_OUTPUT);
1a00099a:	2101      	movs	r1, #1
1a00099c:	201f      	movs	r0, #31
1a00099e:	f000 ffdf 	bl	1a001960 <gpioInit>
   tickConfig(1);
1a0009a2:	2001      	movs	r0, #1
1a0009a4:	2100      	movs	r1, #0
1a0009a6:	f001 f941 	bl	1a001c2c <tickInit>
   tickCallbackSet(diskTickHook, NULL);
1a0009aa:	2100      	movs	r1, #0
1a0009ac:	4801      	ldr	r0, [pc, #4]	; (1a0009b4 <ili9341_gpio_init+0x2c>)
1a0009ae:	f001 f921 	bl	1a001bf4 <tickCallbackSet>
}
1a0009b2:	bd08      	pop	{r3, pc}
1a0009b4:	1a000981 	.word	0x1a000981

1a0009b8 <ili9341_spi_init>:

void ili9341_spi_init(void){
1a0009b8:	b508      	push	{r3, lr}
    spiConfig(SPI0);                       //esto lo hice basándome en el ejemplo de examples>c>sapi>spi>sd_card>fatfss_list
1a0009ba:	2000      	movs	r0, #0
1a0009bc:	f001 f8dc 	bl	1a001b78 <spiInit>
 * @param	pSSP	: The base of SSP peripheral on the chip
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_DMA_Enable(LPC_SSP_T *pSSP)
{
	pSSP->DMACR |= SSP_DMA_BITMASK;
1a0009c0:	4a02      	ldr	r2, [pc, #8]	; (1a0009cc <ili9341_spi_init+0x14>)
1a0009c2:	6a53      	ldr	r3, [r2, #36]	; 0x24
1a0009c4:	f043 0303 	orr.w	r3, r3, #3
1a0009c8:	6253      	str	r3, [r2, #36]	; 0x24

    //FSSDC_InitSPI();                // puede que esto sea solo para leer SD cards examples\c\sapi\spi\sd_card\fatfs_log_time_stamp\src\sd_spi.c

    Chip_SSP_DMA_Enable(LPC_SSP1); // libs\lpc_open\lpc_chip_43xx\inc\ssp_18xx_43xx.h
}
1a0009ca:	bd08      	pop	{r3, pc}
1a0009cc:	400c5000 	.word	0x400c5000

1a0009d0 <gpio_cs_pin>:


void gpio_cs_pin(ili9341_gpio_pin_value_t value) {
1a0009d0:	b508      	push	{r3, lr}
    if (value == ILI9341_PIN_RESET) {
1a0009d2:	b920      	cbnz	r0, 1a0009de <gpio_cs_pin+0xe>
        gpioWrite(CS_PIN, 0);
1a0009d4:	2100      	movs	r1, #0
1a0009d6:	2010      	movs	r0, #16
1a0009d8:	f001 f898 	bl	1a001b0c <gpioWrite>
    } else {
        gpioWrite(CS_PIN, 1);
    }
}
1a0009dc:	bd08      	pop	{r3, pc}
        gpioWrite(CS_PIN, 1);
1a0009de:	2101      	movs	r1, #1
1a0009e0:	2010      	movs	r0, #16
1a0009e2:	f001 f893 	bl	1a001b0c <gpioWrite>
}
1a0009e6:	e7f9      	b.n	1a0009dc <gpio_cs_pin+0xc>

1a0009e8 <gpio_dc_pin>:

void gpio_dc_pin(ili9341_gpio_pin_value_t value) {
1a0009e8:	b508      	push	{r3, lr}
    if (value == ILI9341_PIN_RESET) {
1a0009ea:	b920      	cbnz	r0, 1a0009f6 <gpio_dc_pin+0xe>
        gpioWrite(DC_PIN, 0);
1a0009ec:	2100      	movs	r1, #0
1a0009ee:	2020      	movs	r0, #32
1a0009f0:	f001 f88c 	bl	1a001b0c <gpioWrite>
    } else {
        gpioWrite(DC_PIN, 1);
    }
}
1a0009f4:	bd08      	pop	{r3, pc}
        gpioWrite(DC_PIN, 1);
1a0009f6:	2101      	movs	r1, #1
1a0009f8:	2020      	movs	r0, #32
1a0009fa:	f001 f887 	bl	1a001b0c <gpioWrite>
}
1a0009fe:	e7f9      	b.n	1a0009f4 <gpio_dc_pin+0xc>

1a000a00 <gpio_rst_pin>:

void gpio_rst_pin(ili9341_gpio_pin_value_t value) {
1a000a00:	b508      	push	{r3, lr}
    if (value == ILI9341_PIN_RESET) {
1a000a02:	b920      	cbnz	r0, 1a000a0e <gpio_rst_pin+0xe>
        gpioWrite(RST_PIN, 0);
1a000a04:	2100      	movs	r1, #0
1a000a06:	201f      	movs	r0, #31
1a000a08:	f001 f880 	bl	1a001b0c <gpioWrite>
    } else {
        gpioWrite(RST_PIN, 1);
    }
}
1a000a0c:	bd08      	pop	{r3, pc}
        gpioWrite(RST_PIN, 1);
1a000a0e:	2101      	movs	r1, #1
1a000a10:	201f      	movs	r0, #31
1a000a12:	f001 f87b 	bl	1a001b0c <gpioWrite>
}
1a000a16:	e7f9      	b.n	1a000a0c <gpio_rst_pin+0xc>

1a000a18 <spi_tx_dma_b>:

int spi_tx_dma_b(const uint8_t* data, uint32_t len) {
1a000a18:	b508      	push	{r3, lr}

    bool_t result = spiWrite(SPI0, data, len);      //esto lo hice basándome en Libs>Sapi>Sapi_v0.5.2>Soc>Peripherals>src>sapi_spi.c
1a000a1a:	460a      	mov	r2, r1
1a000a1c:	4601      	mov	r1, r0
1a000a1e:	2000      	movs	r0, #0
1a000a20:	f001 f8d2 	bl	1a001bc8 <spiWrite>

    if (result)
1a000a24:	b108      	cbz	r0, 1a000a2a <spi_tx_dma_b+0x12>
        return 0; // Éxito
1a000a26:	2000      	movs	r0, #0
    else return 1; //Fail
}
1a000a28:	bd08      	pop	{r3, pc}
    else return 1; //Fail
1a000a2a:	2001      	movs	r0, #1
1a000a2c:	e7fc      	b.n	1a000a28 <spi_tx_dma_b+0x10>
1a000a2e:	Address 0x1a000a2e is out of bounds.


1a000a30 <spi_tx_dma_ready>:
	return (pSSP->SR & Stat) ? SET : RESET;
1a000a30:	4b02      	ldr	r3, [pc, #8]	; (1a000a3c <spi_tx_dma_ready+0xc>)
1a000a32:	68d8      	ldr	r0, [r3, #12]
    //en página 1174 del datasheet

    // Código para verificar si el SPI está listo para transmitir
    return (Chip_SSP_GetStatus(LPC_SSP1, SSP_STAT_TNF) == SET);         // line160 -->  \libs\lpc_open\lpc_chip_43xx\src\ssp_18xx_43xx.c
    // return (LPC_SSP1->SR & SPI_SR_TNF) != 0; // Ejemplo: Verifica la bandera de no lleno
}
1a000a34:	f3c0 0040 	ubfx	r0, r0, #1, #1
1a000a38:	4770      	bx	lr
1a000a3a:	bf00      	nop
1a000a3c:	400c5000 	.word	0x400c5000

1a000a40 <initialise_monitor_handles>:
}
1a000a40:	4770      	bx	lr
1a000a42:	Address 0x1a000a42 is out of bounds.


1a000a44 <Reset_Handler>:
void Reset_Handler(void) {
1a000a44:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a000a46:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000a48:	4b19      	ldr	r3, [pc, #100]	; (1a000ab0 <Reset_Handler+0x6c>)
1a000a4a:	4a1a      	ldr	r2, [pc, #104]	; (1a000ab4 <Reset_Handler+0x70>)
1a000a4c:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a000a4e:	3304      	adds	r3, #4
1a000a50:	4a19      	ldr	r2, [pc, #100]	; (1a000ab8 <Reset_Handler+0x74>)
1a000a52:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000a54:	2300      	movs	r3, #0
1a000a56:	e005      	b.n	1a000a64 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a000a58:	4a18      	ldr	r2, [pc, #96]	; (1a000abc <Reset_Handler+0x78>)
1a000a5a:	f04f 31ff 	mov.w	r1, #4294967295
1a000a5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000a62:	3301      	adds	r3, #1
1a000a64:	2b07      	cmp	r3, #7
1a000a66:	d9f7      	bls.n	1a000a58 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a000a68:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a000a6a:	4b15      	ldr	r3, [pc, #84]	; (1a000ac0 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a000a6c:	e007      	b.n	1a000a7e <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a000a6e:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a000a72:	689a      	ldr	r2, [r3, #8]
1a000a74:	6859      	ldr	r1, [r3, #4]
1a000a76:	6818      	ldr	r0, [r3, #0]
1a000a78:	f7ff fb87 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a000a7c:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a000a7e:	4a11      	ldr	r2, [pc, #68]	; (1a000ac4 <Reset_Handler+0x80>)
1a000a80:	4293      	cmp	r3, r2
1a000a82:	d3f4      	bcc.n	1a000a6e <Reset_Handler+0x2a>
1a000a84:	e006      	b.n	1a000a94 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a000a86:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a000a88:	6859      	ldr	r1, [r3, #4]
1a000a8a:	f854 0b08 	ldr.w	r0, [r4], #8
1a000a8e:	f7ff fb8b 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a000a92:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a000a94:	4a0c      	ldr	r2, [pc, #48]	; (1a000ac8 <Reset_Handler+0x84>)
1a000a96:	4293      	cmp	r3, r2
1a000a98:	d3f5      	bcc.n	1a000a86 <Reset_Handler+0x42>
    SystemInit();
1a000a9a:	f000 ff1d 	bl	1a0018d8 <SystemInit>
    __libc_init_array();
1a000a9e:	f001 fae3 	bl	1a002068 <__libc_init_array>
    initialise_monitor_handles();
1a000aa2:	f7ff ffcd 	bl	1a000a40 <initialise_monitor_handles>
    main();
1a000aa6:	f7ff fc2b 	bl	1a000300 <main>
        __asm__ volatile("wfi");
1a000aaa:	bf30      	wfi
1a000aac:	e7fd      	b.n	1a000aaa <Reset_Handler+0x66>
1a000aae:	bf00      	nop
1a000ab0:	40053100 	.word	0x40053100
1a000ab4:	10df1000 	.word	0x10df1000
1a000ab8:	01dff7ff 	.word	0x01dff7ff
1a000abc:	e000e280 	.word	0xe000e280
1a000ac0:	1a000114 	.word	0x1a000114
1a000ac4:	1a000150 	.word	0x1a000150
1a000ac8:	1a000178 	.word	0x1a000178

1a000acc <_fini>:
void _fini(void) {}
1a000acc:	4770      	bx	lr

1a000ace <_init>:
void _init(void) {}
1a000ace:	4770      	bx	lr

1a000ad0 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000ad0:	2300      	movs	r3, #0
1a000ad2:	2b1c      	cmp	r3, #28
1a000ad4:	d812      	bhi.n	1a000afc <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a000ad6:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a000ad8:	4a09      	ldr	r2, [pc, #36]	; (1a000b00 <Board_SetupMuxing+0x30>)
1a000ada:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a000ade:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a000ae2:	784a      	ldrb	r2, [r1, #1]
1a000ae4:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000ae6:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a000aea:	4906      	ldr	r1, [pc, #24]	; (1a000b04 <Board_SetupMuxing+0x34>)
1a000aec:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000af0:	3301      	adds	r3, #1
1a000af2:	2b1c      	cmp	r3, #28
1a000af4:	d9f0      	bls.n	1a000ad8 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a000af6:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000afa:	4770      	bx	lr
1a000afc:	4770      	bx	lr
1a000afe:	bf00      	nop
1a000b00:	1a002128 	.word	0x1a002128
1a000b04:	40086000 	.word	0x40086000

1a000b08 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a000b08:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a000b0a:	4a17      	ldr	r2, [pc, #92]	; (1a000b68 <Board_SetupClocking+0x60>)
1a000b0c:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a000b10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000b14:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000b18:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a000b1c:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a000b20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000b24:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000b28:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a000b2c:	2201      	movs	r2, #1
1a000b2e:	490f      	ldr	r1, [pc, #60]	; (1a000b6c <Board_SetupClocking+0x64>)
1a000b30:	2006      	movs	r0, #6
1a000b32:	f000 faa7 	bl	1a001084 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000b36:	2400      	movs	r4, #0
1a000b38:	b14c      	cbz	r4, 1a000b4e <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a000b3a:	4b0b      	ldr	r3, [pc, #44]	; (1a000b68 <Board_SetupClocking+0x60>)
1a000b3c:	685a      	ldr	r2, [r3, #4]
1a000b3e:	f022 020c 	bic.w	r2, r2, #12
1a000b42:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a000b44:	685a      	ldr	r2, [r3, #4]
1a000b46:	f042 0203 	orr.w	r2, r2, #3
1a000b4a:	605a      	str	r2, [r3, #4]
}
1a000b4c:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a000b4e:	4808      	ldr	r0, [pc, #32]	; (1a000b70 <Board_SetupClocking+0x68>)
1a000b50:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a000b54:	2301      	movs	r3, #1
1a000b56:	788a      	ldrb	r2, [r1, #2]
1a000b58:	7849      	ldrb	r1, [r1, #1]
1a000b5a:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a000b5e:	f000 fd69 	bl	1a001634 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000b62:	3401      	adds	r4, #1
1a000b64:	e7e8      	b.n	1a000b38 <Board_SetupClocking+0x30>
1a000b66:	bf00      	nop
1a000b68:	40043000 	.word	0x40043000
1a000b6c:	0c28cb00 	.word	0x0c28cb00
1a000b70:	1a002124 	.word	0x1a002124

1a000b74 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a000b74:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a000b76:	f7ff ffab 	bl	1a000ad0 <Board_SetupMuxing>
    Board_SetupClocking();
1a000b7a:	f7ff ffc5 	bl	1a000b08 <Board_SetupClocking>
}
1a000b7e:	bd08      	pop	{r3, pc}

1a000b80 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a000b80:	2200      	movs	r2, #0
1a000b82:	2a05      	cmp	r2, #5
1a000b84:	d819      	bhi.n	1a000bba <Board_LED_Init+0x3a>
{
1a000b86:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a000b88:	490c      	ldr	r1, [pc, #48]	; (1a000bbc <Board_LED_Init+0x3c>)
1a000b8a:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a000b8e:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a000b92:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a000b94:	4b0a      	ldr	r3, [pc, #40]	; (1a000bc0 <Board_LED_Init+0x40>)
1a000b96:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a000b9a:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a000b9e:	2001      	movs	r0, #1
1a000ba0:	40a0      	lsls	r0, r4
1a000ba2:	4301      	orrs	r1, r0
1a000ba4:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a000ba8:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a000bac:	2100      	movs	r1, #0
1a000bae:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a000bb0:	3201      	adds	r2, #1
1a000bb2:	2a05      	cmp	r2, #5
1a000bb4:	d9e8      	bls.n	1a000b88 <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a000bb6:	bc70      	pop	{r4, r5, r6}
1a000bb8:	4770      	bx	lr
1a000bba:	4770      	bx	lr
1a000bbc:	1a0021a8 	.word	0x1a0021a8
1a000bc0:	400f4000 	.word	0x400f4000

1a000bc4 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a000bc4:	2300      	movs	r3, #0
1a000bc6:	2b03      	cmp	r3, #3
1a000bc8:	d816      	bhi.n	1a000bf8 <Board_TEC_Init+0x34>
{
1a000bca:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a000bcc:	490b      	ldr	r1, [pc, #44]	; (1a000bfc <Board_TEC_Init+0x38>)
1a000bce:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a000bd2:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a000bd6:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a000bd8:	4c09      	ldr	r4, [pc, #36]	; (1a000c00 <Board_TEC_Init+0x3c>)
1a000bda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a000bde:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a000be2:	2001      	movs	r0, #1
1a000be4:	40a8      	lsls	r0, r5
1a000be6:	ea21 0100 	bic.w	r1, r1, r0
1a000bea:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a000bee:	3301      	adds	r3, #1
1a000bf0:	2b03      	cmp	r3, #3
1a000bf2:	d9eb      	bls.n	1a000bcc <Board_TEC_Init+0x8>
   }
}
1a000bf4:	bc30      	pop	{r4, r5}
1a000bf6:	4770      	bx	lr
1a000bf8:	4770      	bx	lr
1a000bfa:	bf00      	nop
1a000bfc:	1a0021a0 	.word	0x1a0021a0
1a000c00:	400f4000 	.word	0x400f4000

1a000c04 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a000c04:	2300      	movs	r3, #0
1a000c06:	2b08      	cmp	r3, #8
1a000c08:	d816      	bhi.n	1a000c38 <Board_GPIO_Init+0x34>
{
1a000c0a:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a000c0c:	490b      	ldr	r1, [pc, #44]	; (1a000c3c <Board_GPIO_Init+0x38>)
1a000c0e:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a000c12:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a000c16:	784d      	ldrb	r5, [r1, #1]
1a000c18:	4c09      	ldr	r4, [pc, #36]	; (1a000c40 <Board_GPIO_Init+0x3c>)
1a000c1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a000c1e:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a000c22:	2001      	movs	r0, #1
1a000c24:	40a8      	lsls	r0, r5
1a000c26:	ea21 0100 	bic.w	r1, r1, r0
1a000c2a:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a000c2e:	3301      	adds	r3, #1
1a000c30:	2b08      	cmp	r3, #8
1a000c32:	d9eb      	bls.n	1a000c0c <Board_GPIO_Init+0x8>
   }
}
1a000c34:	bc30      	pop	{r4, r5}
1a000c36:	4770      	bx	lr
1a000c38:	4770      	bx	lr
1a000c3a:	bf00      	nop
1a000c3c:	1a0021b4 	.word	0x1a0021b4
1a000c40:	400f4000 	.word	0x400f4000

1a000c44 <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a000c44:	b510      	push	{r4, lr}
1a000c46:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a000c48:	4c08      	ldr	r4, [pc, #32]	; (1a000c6c <Board_ADC_Init+0x28>)
1a000c4a:	4669      	mov	r1, sp
1a000c4c:	4620      	mov	r0, r4
1a000c4e:	f000 f9d9 	bl	1a001004 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a000c52:	4a07      	ldr	r2, [pc, #28]	; (1a000c70 <Board_ADC_Init+0x2c>)
1a000c54:	4669      	mov	r1, sp
1a000c56:	4620      	mov	r0, r4
1a000c58:	f000 f9f4 	bl	1a001044 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a000c5c:	2200      	movs	r2, #0
1a000c5e:	4669      	mov	r1, sp
1a000c60:	4620      	mov	r0, r4
1a000c62:	f000 fa08 	bl	1a001076 <Chip_ADC_SetResolution>
}
1a000c66:	b002      	add	sp, #8
1a000c68:	bd10      	pop	{r4, pc}
1a000c6a:	bf00      	nop
1a000c6c:	400e3000 	.word	0x400e3000
1a000c70:	00061a80 	.word	0x00061a80

1a000c74 <Board_SPI_Init>:
{
1a000c74:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a000c76:	4c0b      	ldr	r4, [pc, #44]	; (1a000ca4 <Board_SPI_Init+0x30>)
1a000c78:	4620      	mov	r0, r4
1a000c7a:	f000 f943 	bl	1a000f04 <Chip_SSP_Init>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a000c7e:	6863      	ldr	r3, [r4, #4]
1a000c80:	f023 0304 	bic.w	r3, r3, #4
1a000c84:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a000c86:	6823      	ldr	r3, [r4, #0]
1a000c88:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a000c8c:	f043 0307 	orr.w	r3, r3, #7
1a000c90:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a000c92:	4905      	ldr	r1, [pc, #20]	; (1a000ca8 <Board_SPI_Init+0x34>)
1a000c94:	4620      	mov	r0, r4
1a000c96:	f000 f916 	bl	1a000ec6 <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a000c9a:	6863      	ldr	r3, [r4, #4]
1a000c9c:	f043 0302 	orr.w	r3, r3, #2
1a000ca0:	6063      	str	r3, [r4, #4]
}
1a000ca2:	bd10      	pop	{r4, pc}
1a000ca4:	400c5000 	.word	0x400c5000
1a000ca8:	000186a0 	.word	0x000186a0

1a000cac <Board_I2C_Init>:
{
1a000cac:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a000cae:	2000      	movs	r0, #0
1a000cb0:	f000 f954 	bl	1a000f5c <Chip_I2C_Init>
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a000cb4:	4b04      	ldr	r3, [pc, #16]	; (1a000cc8 <Board_I2C_Init+0x1c>)
1a000cb6:	f640 0208 	movw	r2, #2056	; 0x808
1a000cba:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a000cbe:	4903      	ldr	r1, [pc, #12]	; (1a000ccc <Board_I2C_Init+0x20>)
1a000cc0:	2000      	movs	r0, #0
1a000cc2:	f000 f95d 	bl	1a000f80 <Chip_I2C_SetClockRate>
}
1a000cc6:	bd08      	pop	{r3, pc}
1a000cc8:	40086000 	.word	0x40086000
1a000ccc:	000f4240 	.word	0x000f4240

1a000cd0 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a000cd0:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a000cd2:	4c07      	ldr	r4, [pc, #28]	; (1a000cf0 <Board_Debug_Init+0x20>)
1a000cd4:	4620      	mov	r0, r4
1a000cd6:	f000 fd67 	bl	1a0017a8 <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a000cda:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000cde:	4620      	mov	r0, r4
1a000ce0:	f000 fd8c 	bl	1a0017fc <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a000ce4:	2303      	movs	r3, #3
1a000ce6:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a000ce8:	2301      	movs	r3, #1
1a000cea:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a000cec:	bd10      	pop	{r4, pc}
1a000cee:	bf00      	nop
1a000cf0:	400c1000 	.word	0x400c1000

1a000cf4 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a000cf4:	b508      	push	{r3, lr}
   DEBUGINIT();
1a000cf6:	f7ff ffeb 	bl	1a000cd0 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a000cfa:	4809      	ldr	r0, [pc, #36]	; (1a000d20 <Board_Init+0x2c>)
1a000cfc:	f000 f95c 	bl	1a000fb8 <Chip_GPIO_Init>

   Board_GPIO_Init();
1a000d00:	f7ff ff80 	bl	1a000c04 <Board_GPIO_Init>
   Board_ADC_Init();
1a000d04:	f7ff ff9e 	bl	1a000c44 <Board_ADC_Init>
   Board_SPI_Init();
1a000d08:	f7ff ffb4 	bl	1a000c74 <Board_SPI_Init>
   Board_I2C_Init();
1a000d0c:	f7ff ffce 	bl	1a000cac <Board_I2C_Init>

   Board_LED_Init();
1a000d10:	f7ff ff36 	bl	1a000b80 <Board_LED_Init>
   Board_TEC_Init();
1a000d14:	f7ff ff56 	bl	1a000bc4 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a000d18:	f000 fa60 	bl	1a0011dc <SystemCoreClockUpdate>
}
1a000d1c:	bd08      	pop	{r3, pc}
1a000d1e:	bf00      	nop
1a000d20:	400f4000 	.word	0x400f4000

1a000d24 <__stdio_init>:
{
   return Board_UARTGetChar();;
}

void __stdio_init()
{
1a000d24:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a000d26:	f7ff ffd3 	bl	1a000cd0 <Board_Debug_Init>
1a000d2a:	bd08      	pop	{r3, pc}

1a000d2c <SSP_Write2BFifo>:
 * Private functions
 ****************************************************************************/

STATIC void SSP_Write2BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	if (xf_setup->tx_data) {
1a000d2c:	680b      	ldr	r3, [r1, #0]
1a000d2e:	b133      	cbz	r3, 1a000d3e <SSP_Write2BFifo+0x12>
		Chip_SSP_SendFrame(pSSP, (*(uint16_t *) ((uint32_t) xf_setup->tx_data +
												 xf_setup->tx_cnt)));
1a000d30:	684a      	ldr	r2, [r1, #4]
		Chip_SSP_SendFrame(pSSP, (*(uint16_t *) ((uint32_t) xf_setup->tx_data +
1a000d32:	5a9b      	ldrh	r3, [r3, r2]
	pSSP->DR = SSP_DR_BITMASK(tx_data);
1a000d34:	6083      	str	r3, [r0, #8]
	}
	else {
		Chip_SSP_SendFrame(pSSP, 0xFFFF);
	}

	xf_setup->tx_cnt += 2;
1a000d36:	684b      	ldr	r3, [r1, #4]
1a000d38:	3302      	adds	r3, #2
1a000d3a:	604b      	str	r3, [r1, #4]
}
1a000d3c:	4770      	bx	lr
1a000d3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
1a000d42:	6083      	str	r3, [r0, #8]
1a000d44:	e7f7      	b.n	1a000d36 <SSP_Write2BFifo+0xa>

1a000d46 <SSP_Write1BFifo>:

/** SSP macro: write 1 bytes to FIFO buffer */
STATIC void SSP_Write1BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	if (xf_setup->tx_data) {
1a000d46:	680b      	ldr	r3, [r1, #0]
1a000d48:	b133      	cbz	r3, 1a000d58 <SSP_Write1BFifo+0x12>
		Chip_SSP_SendFrame(pSSP, (*(uint8_t *) ((uint32_t) xf_setup->tx_data + xf_setup->tx_cnt)));
1a000d4a:	684a      	ldr	r2, [r1, #4]
1a000d4c:	5c9b      	ldrb	r3, [r3, r2]
1a000d4e:	6083      	str	r3, [r0, #8]
	}
	else {
		Chip_SSP_SendFrame(pSSP, 0xFF);
	}

	xf_setup->tx_cnt++;
1a000d50:	684b      	ldr	r3, [r1, #4]
1a000d52:	3301      	adds	r3, #1
1a000d54:	604b      	str	r3, [r1, #4]
}
1a000d56:	4770      	bx	lr
1a000d58:	23ff      	movs	r3, #255	; 0xff
1a000d5a:	6083      	str	r3, [r0, #8]
1a000d5c:	e7f8      	b.n	1a000d50 <SSP_Write1BFifo+0xa>

1a000d5e <SSP_Read2BFifo>:
	return (pSSP->SR & Stat) ? SET : RESET;
1a000d5e:	68c3      	ldr	r3, [r0, #12]
/** SSP macro: read 1 bytes from FIFO buffer */
STATIC void SSP_Read2BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	uint16_t rDat;

	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a000d60:	f013 0f04 	tst.w	r3, #4
1a000d64:	d01b      	beq.n	1a000d9e <SSP_Read2BFifo+0x40>
		   (xf_setup->rx_cnt < xf_setup->length)) {
1a000d66:	68ca      	ldr	r2, [r1, #12]
1a000d68:	690b      	ldr	r3, [r1, #16]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a000d6a:	429a      	cmp	r2, r3
1a000d6c:	d216      	bcs.n	1a000d9c <SSP_Read2BFifo+0x3e>
{
1a000d6e:	b410      	push	{r4}
1a000d70:	e00a      	b.n	1a000d88 <SSP_Read2BFifo+0x2a>
		rDat = Chip_SSP_ReceiveFrame(pSSP);
		if (xf_setup->rx_data) {
			*(uint16_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
		}

		xf_setup->rx_cnt += 2;
1a000d72:	68cb      	ldr	r3, [r1, #12]
1a000d74:	3302      	adds	r3, #2
1a000d76:	60cb      	str	r3, [r1, #12]
1a000d78:	68c3      	ldr	r3, [r0, #12]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a000d7a:	f013 0f04 	tst.w	r3, #4
1a000d7e:	d00a      	beq.n	1a000d96 <SSP_Read2BFifo+0x38>
		   (xf_setup->rx_cnt < xf_setup->length)) {
1a000d80:	68ca      	ldr	r2, [r1, #12]
1a000d82:	690b      	ldr	r3, [r1, #16]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a000d84:	429a      	cmp	r2, r3
1a000d86:	d206      	bcs.n	1a000d96 <SSP_Read2BFifo+0x38>
	return (uint16_t) (SSP_DR_BITMASK(pSSP->DR));
1a000d88:	6883      	ldr	r3, [r0, #8]
1a000d8a:	b29b      	uxth	r3, r3
		if (xf_setup->rx_data) {
1a000d8c:	688c      	ldr	r4, [r1, #8]
1a000d8e:	2c00      	cmp	r4, #0
1a000d90:	d0ef      	beq.n	1a000d72 <SSP_Read2BFifo+0x14>
			*(uint16_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
1a000d92:	52a3      	strh	r3, [r4, r2]
1a000d94:	e7ed      	b.n	1a000d72 <SSP_Read2BFifo+0x14>
	}
}
1a000d96:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000d9a:	4770      	bx	lr
1a000d9c:	4770      	bx	lr
1a000d9e:	4770      	bx	lr

1a000da0 <SSP_Read1BFifo>:
	return (pSSP->SR & Stat) ? SET : RESET;
1a000da0:	68c3      	ldr	r3, [r0, #12]
/** SSP macro: read 2 bytes from FIFO buffer */
STATIC void SSP_Read1BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	uint16_t rDat;

	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a000da2:	f013 0f04 	tst.w	r3, #4
1a000da6:	d01a      	beq.n	1a000dde <SSP_Read1BFifo+0x3e>
		   (xf_setup->rx_cnt < xf_setup->length)) {
1a000da8:	68cb      	ldr	r3, [r1, #12]
1a000daa:	690a      	ldr	r2, [r1, #16]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a000dac:	4293      	cmp	r3, r2
1a000dae:	d215      	bcs.n	1a000ddc <SSP_Read1BFifo+0x3c>
{
1a000db0:	b410      	push	{r4}
1a000db2:	e00a      	b.n	1a000dca <SSP_Read1BFifo+0x2a>
		rDat = Chip_SSP_ReceiveFrame(pSSP);
		if (xf_setup->rx_data) {
			*(uint8_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
		}

		xf_setup->rx_cnt++;
1a000db4:	68cb      	ldr	r3, [r1, #12]
1a000db6:	3301      	adds	r3, #1
1a000db8:	60cb      	str	r3, [r1, #12]
1a000dba:	68c3      	ldr	r3, [r0, #12]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a000dbc:	f013 0f04 	tst.w	r3, #4
1a000dc0:	d009      	beq.n	1a000dd6 <SSP_Read1BFifo+0x36>
		   (xf_setup->rx_cnt < xf_setup->length)) {
1a000dc2:	68cb      	ldr	r3, [r1, #12]
1a000dc4:	690a      	ldr	r2, [r1, #16]
	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a000dc6:	4293      	cmp	r3, r2
1a000dc8:	d205      	bcs.n	1a000dd6 <SSP_Read1BFifo+0x36>
	return (uint16_t) (SSP_DR_BITMASK(pSSP->DR));
1a000dca:	6884      	ldr	r4, [r0, #8]
		if (xf_setup->rx_data) {
1a000dcc:	688a      	ldr	r2, [r1, #8]
1a000dce:	2a00      	cmp	r2, #0
1a000dd0:	d0f0      	beq.n	1a000db4 <SSP_Read1BFifo+0x14>
			*(uint8_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
1a000dd2:	54d4      	strb	r4, [r2, r3]
1a000dd4:	e7ee      	b.n	1a000db4 <SSP_Read1BFifo+0x14>
	}
}
1a000dd6:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000dda:	4770      	bx	lr
1a000ddc:	4770      	bx	lr
1a000dde:	4770      	bx	lr

1a000de0 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a000de0:	4b03      	ldr	r3, [pc, #12]	; (1a000df0 <Chip_SSP_GetClockIndex+0x10>)
1a000de2:	4298      	cmp	r0, r3
1a000de4:	d001      	beq.n	1a000dea <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a000de6:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a000de8:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a000dea:	20a5      	movs	r0, #165	; 0xa5
1a000dec:	4770      	bx	lr
1a000dee:	bf00      	nop
1a000df0:	400c5000 	.word	0x400c5000

1a000df4 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a000df4:	4b04      	ldr	r3, [pc, #16]	; (1a000e08 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a000df6:	4298      	cmp	r0, r3
1a000df8:	d002      	beq.n	1a000e00 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a000dfa:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a000dfe:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a000e00:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a000e04:	4770      	bx	lr
1a000e06:	bf00      	nop
1a000e08:	400c5000 	.word	0x400c5000

1a000e0c <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a000e0c:	6803      	ldr	r3, [r0, #0]
1a000e0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a000e12:	0209      	lsls	r1, r1, #8
1a000e14:	b289      	uxth	r1, r1
1a000e16:	4319      	orrs	r1, r3
1a000e18:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a000e1a:	6102      	str	r2, [r0, #16]
}
1a000e1c:	4770      	bx	lr

1a000e1e <Chip_SSP_RWFrames_Blocking>:

/* SSP Polling Read/Write in blocking mode */
uint32_t Chip_SSP_RWFrames_Blocking(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
1a000e1e:	b538      	push	{r3, r4, r5, lr}
1a000e20:	4604      	mov	r4, r0
1a000e22:	460d      	mov	r5, r1
	return (pSSP->SR & Stat) ? SET : RESET;
1a000e24:	68e3      	ldr	r3, [r4, #12]
	/* Clear all remaining frames in RX FIFO */
	while (Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE)) {
1a000e26:	f013 0f04 	tst.w	r3, #4
1a000e2a:	d001      	beq.n	1a000e30 <Chip_SSP_RWFrames_Blocking+0x12>
	return (uint16_t) (SSP_DR_BITMASK(pSSP->DR));
1a000e2c:	68a3      	ldr	r3, [r4, #8]
1a000e2e:	e7f9      	b.n	1a000e24 <Chip_SSP_RWFrames_Blocking+0x6>
	pSSP->ICR = IntClear;
1a000e30:	2303      	movs	r3, #3
1a000e32:	6223      	str	r3, [r4, #32]
	return SSP_CR0_DSS(pSSP->CR0);
1a000e34:	6823      	ldr	r3, [r4, #0]
	}

	/* Clear status */
	Chip_SSP_ClearIntPending(pSSP, SSP_INT_CLEAR_BITMASK);

	if (Chip_SSP_GetDataSize(pSSP) > SSP_BITS_8) {
1a000e36:	f013 0f08 	tst.w	r3, #8
1a000e3a:	d108      	bne.n	1a000e4e <Chip_SSP_RWFrames_Blocking+0x30>
1a000e3c:	e022      	b.n	1a000e84 <Chip_SSP_RWFrames_Blocking+0x66>
	return (pSSP->RIS & RawInt) ? SET : RESET;
1a000e3e:	69a3      	ldr	r3, [r4, #24]
			if (( Chip_SSP_GetStatus(pSSP, SSP_STAT_TNF) == SET) && ( xf_setup->tx_cnt < xf_setup->length) ) {
				SSP_Write2BFifo(pSSP, xf_setup);
			}

			/* Check overrun error */
			if (Chip_SSP_GetRawIntStatus(pSSP, SSP_RORRIS) == SET) {
1a000e40:	f013 0f01 	tst.w	r3, #1
1a000e44:	d139      	bne.n	1a000eba <Chip_SSP_RWFrames_Blocking+0x9c>
				return ERROR;
			}

			/* Check for any data available in RX FIFO */
			SSP_Read2BFifo(pSSP, xf_setup);
1a000e46:	4629      	mov	r1, r5
1a000e48:	4620      	mov	r0, r4
1a000e4a:	f7ff ff88 	bl	1a000d5e <SSP_Read2BFifo>
		while (xf_setup->rx_cnt < xf_setup->length || xf_setup->tx_cnt < xf_setup->length) {
1a000e4e:	68ea      	ldr	r2, [r5, #12]
1a000e50:	692b      	ldr	r3, [r5, #16]
1a000e52:	429a      	cmp	r2, r3
1a000e54:	d302      	bcc.n	1a000e5c <Chip_SSP_RWFrames_Blocking+0x3e>
1a000e56:	686a      	ldr	r2, [r5, #4]
1a000e58:	4293      	cmp	r3, r2
1a000e5a:	d926      	bls.n	1a000eaa <Chip_SSP_RWFrames_Blocking+0x8c>
	return (pSSP->SR & Stat) ? SET : RESET;
1a000e5c:	68e2      	ldr	r2, [r4, #12]
			if (( Chip_SSP_GetStatus(pSSP, SSP_STAT_TNF) == SET) && ( xf_setup->tx_cnt < xf_setup->length) ) {
1a000e5e:	f012 0f02 	tst.w	r2, #2
1a000e62:	d0ec      	beq.n	1a000e3e <Chip_SSP_RWFrames_Blocking+0x20>
1a000e64:	686a      	ldr	r2, [r5, #4]
1a000e66:	429a      	cmp	r2, r3
1a000e68:	d2e9      	bcs.n	1a000e3e <Chip_SSP_RWFrames_Blocking+0x20>
				SSP_Write2BFifo(pSSP, xf_setup);
1a000e6a:	4629      	mov	r1, r5
1a000e6c:	4620      	mov	r0, r4
1a000e6e:	f7ff ff5d 	bl	1a000d2c <SSP_Write2BFifo>
1a000e72:	e7e4      	b.n	1a000e3e <Chip_SSP_RWFrames_Blocking+0x20>
	return (pSSP->RIS & RawInt) ? SET : RESET;
1a000e74:	69a3      	ldr	r3, [r4, #24]
			if (( Chip_SSP_GetStatus(pSSP, SSP_STAT_TNF) == SET) && ( xf_setup->tx_cnt < xf_setup->length) ) {
				SSP_Write1BFifo(pSSP, xf_setup);
			}

			/* Check overrun error */
			if (Chip_SSP_GetRawIntStatus(pSSP, SSP_RORRIS) == SET) {
1a000e76:	f013 0f01 	tst.w	r3, #1
1a000e7a:	d120      	bne.n	1a000ebe <Chip_SSP_RWFrames_Blocking+0xa0>
				return ERROR;
			}

			/* Check for any data available in RX FIFO */
			SSP_Read1BFifo(pSSP, xf_setup);
1a000e7c:	4629      	mov	r1, r5
1a000e7e:	4620      	mov	r0, r4
1a000e80:	f7ff ff8e 	bl	1a000da0 <SSP_Read1BFifo>
		while (xf_setup->rx_cnt < xf_setup->length || xf_setup->tx_cnt < xf_setup->length) {
1a000e84:	68ea      	ldr	r2, [r5, #12]
1a000e86:	692b      	ldr	r3, [r5, #16]
1a000e88:	429a      	cmp	r2, r3
1a000e8a:	d302      	bcc.n	1a000e92 <Chip_SSP_RWFrames_Blocking+0x74>
1a000e8c:	686a      	ldr	r2, [r5, #4]
1a000e8e:	4293      	cmp	r3, r2
1a000e90:	d90b      	bls.n	1a000eaa <Chip_SSP_RWFrames_Blocking+0x8c>
	return (pSSP->SR & Stat) ? SET : RESET;
1a000e92:	68e2      	ldr	r2, [r4, #12]
			if (( Chip_SSP_GetStatus(pSSP, SSP_STAT_TNF) == SET) && ( xf_setup->tx_cnt < xf_setup->length) ) {
1a000e94:	f012 0f02 	tst.w	r2, #2
1a000e98:	d0ec      	beq.n	1a000e74 <Chip_SSP_RWFrames_Blocking+0x56>
1a000e9a:	686a      	ldr	r2, [r5, #4]
1a000e9c:	429a      	cmp	r2, r3
1a000e9e:	d2e9      	bcs.n	1a000e74 <Chip_SSP_RWFrames_Blocking+0x56>
				SSP_Write1BFifo(pSSP, xf_setup);
1a000ea0:	4629      	mov	r1, r5
1a000ea2:	4620      	mov	r0, r4
1a000ea4:	f7ff ff4f 	bl	1a000d46 <SSP_Write1BFifo>
1a000ea8:	e7e4      	b.n	1a000e74 <Chip_SSP_RWFrames_Blocking+0x56>
		}
	}
	if (xf_setup->tx_data) {
1a000eaa:	682b      	ldr	r3, [r5, #0]
1a000eac:	b10b      	cbz	r3, 1a000eb2 <Chip_SSP_RWFrames_Blocking+0x94>
		return xf_setup->tx_cnt;
1a000eae:	6868      	ldr	r0, [r5, #4]
1a000eb0:	e004      	b.n	1a000ebc <Chip_SSP_RWFrames_Blocking+0x9e>
	}
	else if (xf_setup->rx_data) {
1a000eb2:	68ab      	ldr	r3, [r5, #8]
1a000eb4:	b12b      	cbz	r3, 1a000ec2 <Chip_SSP_RWFrames_Blocking+0xa4>
		return xf_setup->rx_cnt;
1a000eb6:	68e8      	ldr	r0, [r5, #12]
1a000eb8:	e000      	b.n	1a000ebc <Chip_SSP_RWFrames_Blocking+0x9e>
				return ERROR;
1a000eba:	2000      	movs	r0, #0
	}

	return 0;
}
1a000ebc:	bd38      	pop	{r3, r4, r5, pc}
				return ERROR;
1a000ebe:	2000      	movs	r0, #0
1a000ec0:	e7fc      	b.n	1a000ebc <Chip_SSP_RWFrames_Blocking+0x9e>
	return 0;
1a000ec2:	2000      	movs	r0, #0
1a000ec4:	e7fa      	b.n	1a000ebc <Chip_SSP_RWFrames_Blocking+0x9e>

1a000ec6 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a000ec6:	b570      	push	{r4, r5, r6, lr}
1a000ec8:	4606      	mov	r6, r0
1a000eca:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a000ecc:	f7ff ff92 	bl	1a000df4 <Chip_SSP_GetPeriphClockIndex>
1a000ed0:	f000 fc2e 	bl	1a001730 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a000ed4:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a000ed6:	f04f 33ff 	mov.w	r3, #4294967295
	cr0_div = 0;
1a000eda:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a000edc:	e000      	b.n	1a000ee0 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a000ede:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a000ee0:	42ab      	cmp	r3, r5
1a000ee2:	d90b      	bls.n	1a000efc <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a000ee4:	1c4c      	adds	r4, r1, #1
1a000ee6:	fb02 f304 	mul.w	r3, r2, r4
1a000eea:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a000eee:	429d      	cmp	r5, r3
1a000ef0:	d2f6      	bcs.n	1a000ee0 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a000ef2:	2cff      	cmp	r4, #255	; 0xff
1a000ef4:	d9f3      	bls.n	1a000ede <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a000ef6:	3202      	adds	r2, #2
				cr0_div = 0;
1a000ef8:	2100      	movs	r1, #0
1a000efa:	e7f1      	b.n	1a000ee0 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a000efc:	4630      	mov	r0, r6
1a000efe:	f7ff ff85 	bl	1a000e0c <Chip_SSP_SetClockRate>
}
1a000f02:	bd70      	pop	{r4, r5, r6, pc}

1a000f04 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a000f04:	b510      	push	{r4, lr}
1a000f06:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a000f08:	f7ff ff6a 	bl	1a000de0 <Chip_SSP_GetClockIndex>
1a000f0c:	f000 fbf6 	bl	1a0016fc <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a000f10:	4620      	mov	r0, r4
1a000f12:	f7ff ff6f 	bl	1a000df4 <Chip_SSP_GetPeriphClockIndex>
1a000f16:	f000 fbf1 	bl	1a0016fc <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a000f1a:	6863      	ldr	r3, [r4, #4]
1a000f1c:	f023 0304 	bic.w	r3, r3, #4
1a000f20:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a000f22:	6823      	ldr	r3, [r4, #0]
1a000f24:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a000f28:	f043 0307 	orr.w	r3, r3, #7
1a000f2c:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a000f2e:	4902      	ldr	r1, [pc, #8]	; (1a000f38 <Chip_SSP_Init+0x34>)
1a000f30:	4620      	mov	r0, r4
1a000f32:	f7ff ffc8 	bl	1a000ec6 <Chip_SSP_SetBitRate>
}
1a000f36:	bd10      	pop	{r4, pc}
1a000f38:	000186a0 	.word	0x000186a0

1a000f3c <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a000f3c:	2901      	cmp	r1, #1
1a000f3e:	d109      	bne.n	1a000f54 <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a000f40:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a000f44:	0082      	lsls	r2, r0, #2
1a000f46:	4b04      	ldr	r3, [pc, #16]	; (1a000f58 <Chip_I2C_EventHandler+0x1c>)
1a000f48:	4413      	add	r3, r2
1a000f4a:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a000f4c:	7d13      	ldrb	r3, [r2, #20]
1a000f4e:	b2db      	uxtb	r3, r3
1a000f50:	2b04      	cmp	r3, #4
1a000f52:	d0fb      	beq.n	1a000f4c <Chip_I2C_EventHandler+0x10>
}
1a000f54:	4770      	bx	lr
1a000f56:	bf00      	nop
1a000f58:	10000000 	.word	0x10000000

1a000f5c <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a000f5c:	b570      	push	{r4, r5, r6, lr}
1a000f5e:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a000f60:	4e06      	ldr	r6, [pc, #24]	; (1a000f7c <Chip_I2C_Init+0x20>)
1a000f62:	00c4      	lsls	r4, r0, #3
1a000f64:	1a22      	subs	r2, r4, r0
1a000f66:	0093      	lsls	r3, r2, #2
1a000f68:	4433      	add	r3, r6
1a000f6a:	8898      	ldrh	r0, [r3, #4]
1a000f6c:	f000 fbc6 	bl	1a0016fc <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a000f70:	1b64      	subs	r4, r4, r5
1a000f72:	00a3      	lsls	r3, r4, #2
1a000f74:	58f3      	ldr	r3, [r6, r3]
1a000f76:	226c      	movs	r2, #108	; 0x6c
1a000f78:	619a      	str	r2, [r3, #24]
}
1a000f7a:	bd70      	pop	{r4, r5, r6, pc}
1a000f7c:	10000000 	.word	0x10000000

1a000f80 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a000f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000f84:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a000f86:	4e0b      	ldr	r6, [pc, #44]	; (1a000fb4 <Chip_I2C_SetClockRate+0x34>)
1a000f88:	00c5      	lsls	r5, r0, #3
1a000f8a:	1a2b      	subs	r3, r5, r0
1a000f8c:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a000f90:	eb06 0308 	add.w	r3, r6, r8
1a000f94:	8898      	ldrh	r0, [r3, #4]
1a000f96:	f000 fbcb 	bl	1a001730 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a000f9a:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a000f9e:	f856 3008 	ldr.w	r3, [r6, r8]
1a000fa2:	0842      	lsrs	r2, r0, #1
1a000fa4:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a000fa6:	f856 3008 	ldr.w	r3, [r6, r8]
1a000faa:	691a      	ldr	r2, [r3, #16]
1a000fac:	1a80      	subs	r0, r0, r2
1a000fae:	6158      	str	r0, [r3, #20]
}
1a000fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a000fb4:	10000000 	.word	0x10000000

1a000fb8 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a000fb8:	4770      	bx	lr
1a000fba:	Address 0x1a000fba is out of bounds.


1a000fbc <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a000fbc:	4b03      	ldr	r3, [pc, #12]	; (1a000fcc <Chip_ADC_GetClockIndex+0x10>)
1a000fbe:	4298      	cmp	r0, r3
1a000fc0:	d001      	beq.n	1a000fc6 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a000fc2:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a000fc4:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a000fc6:	2004      	movs	r0, #4
1a000fc8:	4770      	bx	lr
1a000fca:	bf00      	nop
1a000fcc:	400e4000 	.word	0x400e4000

1a000fd0 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a000fd0:	b570      	push	{r4, r5, r6, lr}
1a000fd2:	460d      	mov	r5, r1
1a000fd4:	4614      	mov	r4, r2
1a000fd6:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a000fd8:	f7ff fff0 	bl	1a000fbc <Chip_ADC_GetClockIndex>
1a000fdc:	f000 fba8 	bl	1a001730 <Chip_Clock_GetRate>
	if (burstMode) {
1a000fe0:	b155      	cbz	r5, 1a000ff8 <getClkDiv+0x28>
		fullAdcRate = adcRate * clks;
1a000fe2:	fb04 f406 	mul.w	r4, r4, r6
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a000fe6:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a000fea:	0064      	lsls	r4, r4, #1
1a000fec:	fbb0 f0f4 	udiv	r0, r0, r4
1a000ff0:	b2c0      	uxtb	r0, r0
1a000ff2:	3801      	subs	r0, #1
	return div;
}
1a000ff4:	b2c0      	uxtb	r0, r0
1a000ff6:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a000ff8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a000ffc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a001000:	e7f1      	b.n	1a000fe6 <getClkDiv+0x16>
1a001002:	Address 0x1a001002 is out of bounds.


1a001004 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a001004:	b538      	push	{r3, r4, r5, lr}
1a001006:	4605      	mov	r5, r0
1a001008:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a00100a:	f7ff ffd7 	bl	1a000fbc <Chip_ADC_GetClockIndex>
1a00100e:	2301      	movs	r3, #1
1a001010:	461a      	mov	r2, r3
1a001012:	4619      	mov	r1, r3
1a001014:	f000 fb54 	bl	1a0016c0 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a001018:	2100      	movs	r1, #0
1a00101a:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a00101c:	4a08      	ldr	r2, [pc, #32]	; (1a001040 <Chip_ADC_Init+0x3c>)
1a00101e:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a001020:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a001022:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a001024:	230b      	movs	r3, #11
1a001026:	4628      	mov	r0, r5
1a001028:	f7ff ffd2 	bl	1a000fd0 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a00102c:	0200      	lsls	r0, r0, #8
1a00102e:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a001032:	7920      	ldrb	r0, [r4, #4]
1a001034:	0440      	lsls	r0, r0, #17
1a001036:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a00103a:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a00103c:	6028      	str	r0, [r5, #0]
}
1a00103e:	bd38      	pop	{r3, r4, r5, pc}
1a001040:	00061a80 	.word	0x00061a80

1a001044 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a001044:	b570      	push	{r4, r5, r6, lr}
1a001046:	4605      	mov	r5, r0
1a001048:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a00104a:	6804      	ldr	r4, [r0, #0]
1a00104c:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a001050:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a001054:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a001056:	790b      	ldrb	r3, [r1, #4]
1a001058:	f1c3 030b 	rsb	r3, r3, #11
1a00105c:	b2db      	uxtb	r3, r3
1a00105e:	7949      	ldrb	r1, [r1, #5]
1a001060:	f7ff ffb6 	bl	1a000fd0 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a001064:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a001068:	7933      	ldrb	r3, [r6, #4]
1a00106a:	045b      	lsls	r3, r3, #17
1a00106c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a001070:	4303      	orrs	r3, r0
	pADC->CR = cr;
1a001072:	602b      	str	r3, [r5, #0]
}
1a001074:	bd70      	pop	{r4, r5, r6, pc}

1a001076 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a001076:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a001078:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a00107a:	680a      	ldr	r2, [r1, #0]
1a00107c:	f7ff ffe2 	bl	1a001044 <Chip_ADC_SetSampleRate>
}
1a001080:	bd08      	pop	{r3, pc}
1a001082:	Address 0x1a001082 is out of bounds.


1a001084 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a001084:	b570      	push	{r4, r5, r6, lr}
1a001086:	b08a      	sub	sp, #40	; 0x28
1a001088:	4605      	mov	r5, r0
1a00108a:	460e      	mov	r6, r1
1a00108c:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a00108e:	f24c 3350 	movw	r3, #50000	; 0xc350
1a001092:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a001094:	2806      	cmp	r0, #6
1a001096:	d018      	beq.n	1a0010ca <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a001098:	2300      	movs	r3, #0
1a00109a:	2201      	movs	r2, #1
1a00109c:	4629      	mov	r1, r5
1a00109e:	2004      	movs	r0, #4
1a0010a0:	f000 fac8 	bl	1a001634 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a0010a4:	4a4a      	ldr	r2, [pc, #296]	; (1a0011d0 <Chip_SetupCoreClock+0x14c>)
1a0010a6:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a0010a8:	f043 0301 	orr.w	r3, r3, #1
1a0010ac:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a0010ae:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a0010b2:	a901      	add	r1, sp, #4
1a0010b4:	4630      	mov	r0, r6
1a0010b6:	f000 fa35 	bl	1a001524 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a0010ba:	4b46      	ldr	r3, [pc, #280]	; (1a0011d4 <Chip_SetupCoreClock+0x150>)
1a0010bc:	429e      	cmp	r6, r3
1a0010be:	d916      	bls.n	1a0010ee <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a0010c0:	9b01      	ldr	r3, [sp, #4]
1a0010c2:	f013 0f40 	tst.w	r3, #64	; 0x40
1a0010c6:	d003      	beq.n	1a0010d0 <Chip_SetupCoreClock+0x4c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a0010c8:	e7fe      	b.n	1a0010c8 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a0010ca:	f000 f98d 	bl	1a0013e8 <Chip_Clock_EnableCrystal>
1a0010ce:	e7e3      	b.n	1a001098 <Chip_SetupCoreClock+0x14>
		} else if (ppll.ctrl & (1 << 7)){
1a0010d0:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0010d4:	d005      	beq.n	1a0010e2 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a0010d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0010da:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a0010dc:	2500      	movs	r5, #0
			direct = 1;
1a0010de:	2601      	movs	r6, #1
1a0010e0:	e007      	b.n	1a0010f2 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a0010e2:	9b04      	ldr	r3, [sp, #16]
1a0010e4:	3301      	adds	r3, #1
1a0010e6:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a0010e8:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a0010ea:	2600      	movs	r6, #0
1a0010ec:	e001      	b.n	1a0010f2 <Chip_SetupCoreClock+0x6e>
1a0010ee:	2500      	movs	r5, #0
1a0010f0:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0010f2:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0010f6:	9b01      	ldr	r3, [sp, #4]
1a0010f8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0010fc:	9a05      	ldr	r2, [sp, #20]
1a0010fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a001102:	9a03      	ldr	r2, [sp, #12]
1a001104:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a001108:	9a04      	ldr	r2, [sp, #16]
1a00110a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00110e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001112:	4a2f      	ldr	r2, [pc, #188]	; (1a0011d0 <Chip_SetupCoreClock+0x14c>)
1a001114:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a001116:	4b2e      	ldr	r3, [pc, #184]	; (1a0011d0 <Chip_SetupCoreClock+0x14c>)
1a001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a00111a:	f013 0f01 	tst.w	r3, #1
1a00111e:	d0fa      	beq.n	1a001116 <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a001120:	2300      	movs	r3, #0
1a001122:	2201      	movs	r2, #1
1a001124:	2109      	movs	r1, #9
1a001126:	2004      	movs	r0, #4
1a001128:	f000 fa84 	bl	1a001634 <Chip_Clock_SetBaseClock>

	if (direct) {
1a00112c:	b306      	cbz	r6, 1a001170 <Chip_SetupCoreClock+0xec>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a00112e:	f24c 3350 	movw	r3, #50000	; 0xc350
1a001132:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a001134:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001136:	1e5a      	subs	r2, r3, #1
1a001138:	9209      	str	r2, [sp, #36]	; 0x24
1a00113a:	2b00      	cmp	r3, #0
1a00113c:	d1fa      	bne.n	1a001134 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a00113e:	9b01      	ldr	r3, [sp, #4]
1a001140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a001144:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a001146:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00114a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a00114e:	9a05      	ldr	r2, [sp, #20]
1a001150:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a001154:	9a03      	ldr	r2, [sp, #12]
1a001156:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a00115a:	9a04      	ldr	r2, [sp, #16]
1a00115c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001160:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001164:	4a1a      	ldr	r2, [pc, #104]	; (1a0011d0 <Chip_SetupCoreClock+0x14c>)
1a001166:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a001168:	2c00      	cmp	r4, #0
1a00116a:	d12e      	bne.n	1a0011ca <Chip_SetupCoreClock+0x146>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a00116c:	b00a      	add	sp, #40	; 0x28
1a00116e:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pdivide) {
1a001170:	2d00      	cmp	r5, #0
1a001172:	d0f9      	beq.n	1a001168 <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a001174:	f24c 3350 	movw	r3, #50000	; 0xc350
1a001178:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a00117a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00117c:	1e5a      	subs	r2, r3, #1
1a00117e:	9209      	str	r2, [sp, #36]	; 0x24
1a001180:	2b00      	cmp	r3, #0
1a001182:	d1fa      	bne.n	1a00117a <Chip_SetupCoreClock+0xf6>
		ppll.psel--;
1a001184:	9b04      	ldr	r3, [sp, #16]
1a001186:	1e5a      	subs	r2, r3, #1
1a001188:	9204      	str	r2, [sp, #16]
1a00118a:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a00118e:	9b01      	ldr	r3, [sp, #4]
1a001190:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a001194:	9905      	ldr	r1, [sp, #20]
1a001196:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a00119a:	9903      	ldr	r1, [sp, #12]
1a00119c:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a0011a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0011a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0011a8:	4a09      	ldr	r2, [pc, #36]	; (1a0011d0 <Chip_SetupCoreClock+0x14c>)
1a0011aa:	6453      	str	r3, [r2, #68]	; 0x44
1a0011ac:	e7dc      	b.n	1a001168 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a0011ae:	480a      	ldr	r0, [pc, #40]	; (1a0011d8 <Chip_SetupCoreClock+0x154>)
1a0011b0:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0011b4:	78cb      	ldrb	r3, [r1, #3]
1a0011b6:	788a      	ldrb	r2, [r1, #2]
1a0011b8:	7849      	ldrb	r1, [r1, #1]
1a0011ba:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0011be:	f000 fa39 	bl	1a001634 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a0011c2:	3401      	adds	r4, #1
1a0011c4:	2c11      	cmp	r4, #17
1a0011c6:	d9f2      	bls.n	1a0011ae <Chip_SetupCoreClock+0x12a>
1a0011c8:	e7d0      	b.n	1a00116c <Chip_SetupCoreClock+0xe8>
1a0011ca:	2400      	movs	r4, #0
1a0011cc:	e7fa      	b.n	1a0011c4 <Chip_SetupCoreClock+0x140>
1a0011ce:	bf00      	nop
1a0011d0:	40050000 	.word	0x40050000
1a0011d4:	068e7780 	.word	0x068e7780
1a0011d8:	1a0021cc 	.word	0x1a0021cc

1a0011dc <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a0011dc:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a0011de:	2069      	movs	r0, #105	; 0x69
1a0011e0:	f000 faa6 	bl	1a001730 <Chip_Clock_GetRate>
1a0011e4:	4b01      	ldr	r3, [pc, #4]	; (1a0011ec <SystemCoreClockUpdate+0x10>)
1a0011e6:	6018      	str	r0, [r3, #0]
}
1a0011e8:	bd08      	pop	{r3, pc}
1a0011ea:	bf00      	nop
1a0011ec:	100000d8 	.word	0x100000d8

1a0011f0 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0011f0:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a0011f2:	680b      	ldr	r3, [r1, #0]
1a0011f4:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0011f8:	d002      	beq.n	1a001200 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a0011fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0011fe:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a001200:	4607      	mov	r7, r0
1a001202:	2501      	movs	r5, #1
1a001204:	e03a      	b.n	1a00127c <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a001206:	694b      	ldr	r3, [r1, #20]
1a001208:	fb03 f302 	mul.w	r3, r3, r2
1a00120c:	fbb3 f3f5 	udiv	r3, r3, r5
1a001210:	e01c      	b.n	1a00124c <pll_calc_divs+0x5c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a001212:	461c      	mov	r4, r3
	if (val < 0)
1a001214:	ebb0 0c04 	subs.w	ip, r0, r4
1a001218:	d427      	bmi.n	1a00126a <pll_calc_divs+0x7a>
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a00121a:	4567      	cmp	r7, ip
1a00121c:	d906      	bls.n	1a00122c <pll_calc_divs+0x3c>
					ppll->nsel = n;
1a00121e:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a001220:	1c77      	adds	r7, r6, #1
1a001222:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a001224:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a001226:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a001228:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a00122a:	4667      	mov	r7, ip
			for (m = 1; m <= 256; m++) {
1a00122c:	3201      	adds	r2, #1
1a00122e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a001232:	dc1d      	bgt.n	1a001270 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 6)) {
1a001234:	680c      	ldr	r4, [r1, #0]
1a001236:	f014 0f40 	tst.w	r4, #64	; 0x40
1a00123a:	d0e4      	beq.n	1a001206 <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a00123c:	1c73      	adds	r3, r6, #1
1a00123e:	fa02 fc03 	lsl.w	ip, r2, r3
1a001242:	694b      	ldr	r3, [r1, #20]
1a001244:	fb03 f30c 	mul.w	r3, r3, ip
1a001248:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a00124c:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a001288 <pll_calc_divs+0x98>
1a001250:	4563      	cmp	r3, ip
1a001252:	d9eb      	bls.n	1a00122c <pll_calc_divs+0x3c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a001254:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a00128c <pll_calc_divs+0x9c>
1a001258:	4563      	cmp	r3, ip
1a00125a:	d809      	bhi.n	1a001270 <pll_calc_divs+0x80>
				if (ppll->ctrl & (1 << 7)) {
1a00125c:	f014 0f80 	tst.w	r4, #128	; 0x80
1a001260:	d1d7      	bne.n	1a001212 <pll_calc_divs+0x22>
					fout = fcco >> (p + 1);
1a001262:	1c74      	adds	r4, r6, #1
1a001264:	fa23 f404 	lsr.w	r4, r3, r4
1a001268:	e7d4      	b.n	1a001214 <pll_calc_divs+0x24>
		return -val;
1a00126a:	f1cc 0c00 	rsb	ip, ip, #0
1a00126e:	e7d4      	b.n	1a00121a <pll_calc_divs+0x2a>
		for (p = 0; p < 4; p ++) {
1a001270:	3601      	adds	r6, #1
1a001272:	2e03      	cmp	r6, #3
1a001274:	dc01      	bgt.n	1a00127a <pll_calc_divs+0x8a>
			for (m = 1; m <= 256; m++) {
1a001276:	2201      	movs	r2, #1
1a001278:	e7d9      	b.n	1a00122e <pll_calc_divs+0x3e>
	for (n = 1; n <= 4; n++) {
1a00127a:	3501      	adds	r5, #1
1a00127c:	2d04      	cmp	r5, #4
1a00127e:	dc01      	bgt.n	1a001284 <pll_calc_divs+0x94>
		for (p = 0; p < 4; p ++) {
1a001280:	2600      	movs	r6, #0
1a001282:	e7f6      	b.n	1a001272 <pll_calc_divs+0x82>
				}
			}
		}
	}
}
1a001284:	bcf0      	pop	{r4, r5, r6, r7}
1a001286:	4770      	bx	lr
1a001288:	094c5eff 	.word	0x094c5eff
1a00128c:	1312d000 	.word	0x1312d000

1a001290 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a001290:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001292:	b099      	sub	sp, #100	; 0x64
1a001294:	4605      	mov	r5, r0
1a001296:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a001298:	225c      	movs	r2, #92	; 0x5c
1a00129a:	2100      	movs	r1, #0
1a00129c:	a801      	add	r0, sp, #4
1a00129e:	f000 ff07 	bl	1a0020b0 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a0012a2:	2380      	movs	r3, #128	; 0x80
1a0012a4:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a0012a6:	6963      	ldr	r3, [r4, #20]
1a0012a8:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a0012aa:	7923      	ldrb	r3, [r4, #4]
1a0012ac:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a0012b0:	4669      	mov	r1, sp
1a0012b2:	4628      	mov	r0, r5
1a0012b4:	f7ff ff9c 	bl	1a0011f0 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a0012b8:	9b06      	ldr	r3, [sp, #24]
1a0012ba:	42ab      	cmp	r3, r5
1a0012bc:	d027      	beq.n	1a00130e <pll_get_frac+0x7e>
	if (val < 0)
1a0012be:	1aeb      	subs	r3, r5, r3
1a0012c0:	d42e      	bmi.n	1a001320 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a0012c2:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a0012c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a0012c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0012ca:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a0012cc:	6963      	ldr	r3, [r4, #20]
1a0012ce:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a0012d0:	7923      	ldrb	r3, [r4, #4]
1a0012d2:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a0012d6:	a910      	add	r1, sp, #64	; 0x40
1a0012d8:	4628      	mov	r0, r5
1a0012da:	f7ff ff89 	bl	1a0011f0 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a0012de:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a0012e0:	42ab      	cmp	r3, r5
1a0012e2:	d01f      	beq.n	1a001324 <pll_get_frac+0x94>
	if (val < 0)
1a0012e4:	1aeb      	subs	r3, r5, r3
1a0012e6:	d425      	bmi.n	1a001334 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a0012e8:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a0012ea:	4b2b      	ldr	r3, [pc, #172]	; (1a001398 <pll_get_frac+0x108>)
1a0012ec:	429d      	cmp	r5, r3
1a0012ee:	d923      	bls.n	1a001338 <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a0012f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a0012f2:	1aed      	subs	r5, r5, r3
1a0012f4:	d433      	bmi.n	1a00135e <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a0012f6:	42ae      	cmp	r6, r5
1a0012f8:	dc3b      	bgt.n	1a001372 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a0012fa:	42be      	cmp	r6, r7
1a0012fc:	dc31      	bgt.n	1a001362 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a0012fe:	466d      	mov	r5, sp
1a001300:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001302:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001304:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001308:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00130c:	e006      	b.n	1a00131c <pll_get_frac+0x8c>
		*ppll = pll[0];
1a00130e:	466d      	mov	r5, sp
1a001310:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001312:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001314:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001318:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a00131c:	b019      	add	sp, #100	; 0x64
1a00131e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a001320:	425b      	negs	r3, r3
1a001322:	e7ce      	b.n	1a0012c2 <pll_get_frac+0x32>
		*ppll = pll[2];
1a001324:	ad10      	add	r5, sp, #64	; 0x40
1a001326:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001328:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00132a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00132e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a001332:	e7f3      	b.n	1a00131c <pll_get_frac+0x8c>
		return -val;
1a001334:	425b      	negs	r3, r3
1a001336:	e7d7      	b.n	1a0012e8 <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a001338:	2340      	movs	r3, #64	; 0x40
1a00133a:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a00133c:	6963      	ldr	r3, [r4, #20]
1a00133e:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a001340:	a908      	add	r1, sp, #32
1a001342:	4628      	mov	r0, r5
1a001344:	f7ff ff54 	bl	1a0011f0 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a001348:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00134a:	42ab      	cmp	r3, r5
1a00134c:	d1d0      	bne.n	1a0012f0 <pll_get_frac+0x60>
			*ppll = pll[1];
1a00134e:	ad08      	add	r5, sp, #32
1a001350:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001352:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001354:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001358:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a00135c:	e7de      	b.n	1a00131c <pll_get_frac+0x8c>
		return -val;
1a00135e:	426d      	negs	r5, r5
1a001360:	e7c9      	b.n	1a0012f6 <pll_get_frac+0x66>
			*ppll = pll[2];
1a001362:	ad10      	add	r5, sp, #64	; 0x40
1a001364:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001366:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001368:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00136c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001370:	e7d4      	b.n	1a00131c <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a001372:	42af      	cmp	r7, r5
1a001374:	db07      	blt.n	1a001386 <pll_get_frac+0xf6>
			*ppll = pll[1];
1a001376:	ad08      	add	r5, sp, #32
1a001378:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00137a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00137c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001380:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001384:	e7ca      	b.n	1a00131c <pll_get_frac+0x8c>
			*ppll = pll[2];
1a001386:	ad10      	add	r5, sp, #64	; 0x40
1a001388:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00138a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00138c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001390:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001394:	e7c2      	b.n	1a00131c <pll_get_frac+0x8c>
1a001396:	bf00      	nop
1a001398:	068e7780 	.word	0x068e7780

1a00139c <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a00139c:	b430      	push	{r4, r5}
1a00139e:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a0013a0:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a0013a2:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0013a4:	e000      	b.n	1a0013a8 <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a0013a6:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0013a8:	281c      	cmp	r0, #28
1a0013aa:	d118      	bne.n	1a0013de <Chip_Clock_FindBaseClock+0x42>
1a0013ac:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0013b0:	0051      	lsls	r1, r2, #1
1a0013b2:	4a0c      	ldr	r2, [pc, #48]	; (1a0013e4 <Chip_Clock_FindBaseClock+0x48>)
1a0013b4:	440a      	add	r2, r1
1a0013b6:	7914      	ldrb	r4, [r2, #4]
1a0013b8:	4284      	cmp	r4, r0
1a0013ba:	d010      	beq.n	1a0013de <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a0013bc:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a0013c0:	004a      	lsls	r2, r1, #1
1a0013c2:	4908      	ldr	r1, [pc, #32]	; (1a0013e4 <Chip_Clock_FindBaseClock+0x48>)
1a0013c4:	5a8a      	ldrh	r2, [r1, r2]
1a0013c6:	42aa      	cmp	r2, r5
1a0013c8:	d8ed      	bhi.n	1a0013a6 <Chip_Clock_FindBaseClock+0xa>
1a0013ca:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0013ce:	0051      	lsls	r1, r2, #1
1a0013d0:	4a04      	ldr	r2, [pc, #16]	; (1a0013e4 <Chip_Clock_FindBaseClock+0x48>)
1a0013d2:	440a      	add	r2, r1
1a0013d4:	8852      	ldrh	r2, [r2, #2]
1a0013d6:	42aa      	cmp	r2, r5
1a0013d8:	d3e5      	bcc.n	1a0013a6 <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a0013da:	4620      	mov	r0, r4
1a0013dc:	e7e4      	b.n	1a0013a8 <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a0013de:	bc30      	pop	{r4, r5}
1a0013e0:	4770      	bx	lr
1a0013e2:	bf00      	nop
1a0013e4:	1a002220 	.word	0x1a002220

1a0013e8 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a0013e8:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a0013ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a0013ee:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a0013f0:	4a0d      	ldr	r2, [pc, #52]	; (1a001428 <Chip_Clock_EnableCrystal+0x40>)
1a0013f2:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a0013f4:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a0013f8:	6992      	ldr	r2, [r2, #24]
1a0013fa:	428a      	cmp	r2, r1
1a0013fc:	d001      	beq.n	1a001402 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0013fe:	4a0a      	ldr	r2, [pc, #40]	; (1a001428 <Chip_Clock_EnableCrystal+0x40>)
1a001400:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a001402:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a001406:	4a09      	ldr	r2, [pc, #36]	; (1a00142c <Chip_Clock_EnableCrystal+0x44>)
1a001408:	6811      	ldr	r1, [r2, #0]
1a00140a:	4a09      	ldr	r2, [pc, #36]	; (1a001430 <Chip_Clock_EnableCrystal+0x48>)
1a00140c:	4291      	cmp	r1, r2
1a00140e:	d901      	bls.n	1a001414 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a001410:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a001414:	4a04      	ldr	r2, [pc, #16]	; (1a001428 <Chip_Clock_EnableCrystal+0x40>)
1a001416:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a001418:	9b01      	ldr	r3, [sp, #4]
1a00141a:	1e5a      	subs	r2, r3, #1
1a00141c:	9201      	str	r2, [sp, #4]
1a00141e:	2b00      	cmp	r3, #0
1a001420:	d1fa      	bne.n	1a001418 <Chip_Clock_EnableCrystal+0x30>
}
1a001422:	b002      	add	sp, #8
1a001424:	4770      	bx	lr
1a001426:	bf00      	nop
1a001428:	40050000 	.word	0x40050000
1a00142c:	1a0021c8 	.word	0x1a0021c8
1a001430:	01312cff 	.word	0x01312cff

1a001434 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a001434:	3012      	adds	r0, #18
1a001436:	4b05      	ldr	r3, [pc, #20]	; (1a00144c <Chip_Clock_GetDividerSource+0x18>)
1a001438:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a00143c:	f010 0f01 	tst.w	r0, #1
1a001440:	d102      	bne.n	1a001448 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001442:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a001446:	4770      	bx	lr
		return CLKINPUT_PD;
1a001448:	2011      	movs	r0, #17
}
1a00144a:	4770      	bx	lr
1a00144c:	40050000 	.word	0x40050000

1a001450 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a001450:	f100 0212 	add.w	r2, r0, #18
1a001454:	4b03      	ldr	r3, [pc, #12]	; (1a001464 <Chip_Clock_GetDividerDivisor+0x14>)
1a001456:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a00145a:	4b03      	ldr	r3, [pc, #12]	; (1a001468 <Chip_Clock_GetDividerDivisor+0x18>)
1a00145c:	5c18      	ldrb	r0, [r3, r0]
}
1a00145e:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a001462:	4770      	bx	lr
1a001464:	40050000 	.word	0x40050000
1a001468:	1a002218 	.word	0x1a002218

1a00146c <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a00146c:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a00146e:	2810      	cmp	r0, #16
1a001470:	d80a      	bhi.n	1a001488 <Chip_Clock_GetClockInputHz+0x1c>
1a001472:	e8df f000 	tbb	[pc, r0]
1a001476:	0b44      	.short	0x0b44
1a001478:	0921180d 	.word	0x0921180d
1a00147c:	2d2a2724 	.word	0x2d2a2724
1a001480:	34300909 	.word	0x34300909
1a001484:	3c38      	.short	0x3c38
1a001486:	40          	.byte	0x40
1a001487:	00          	.byte	0x00
	uint32_t rate = 0;
1a001488:	2000      	movs	r0, #0
1a00148a:	e03a      	b.n	1a001502 <Chip_Clock_GetClockInputHz+0x96>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a00148c:	481e      	ldr	r0, [pc, #120]	; (1a001508 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a00148e:	e038      	b.n	1a001502 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a001490:	4b1e      	ldr	r3, [pc, #120]	; (1a00150c <Chip_Clock_GetClockInputHz+0xa0>)
1a001492:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a001496:	f003 0307 	and.w	r3, r3, #7
1a00149a:	2b04      	cmp	r3, #4
1a00149c:	d001      	beq.n	1a0014a2 <Chip_Clock_GetClockInputHz+0x36>
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a00149e:	481c      	ldr	r0, [pc, #112]	; (1a001510 <Chip_Clock_GetClockInputHz+0xa4>)
1a0014a0:	e02f      	b.n	1a001502 <Chip_Clock_GetClockInputHz+0x96>
	uint32_t rate = 0;
1a0014a2:	2000      	movs	r0, #0
1a0014a4:	e02d      	b.n	1a001502 <Chip_Clock_GetClockInputHz+0x96>
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a0014a6:	4b19      	ldr	r3, [pc, #100]	; (1a00150c <Chip_Clock_GetClockInputHz+0xa0>)
1a0014a8:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a0014ac:	f003 0307 	and.w	r3, r3, #7
1a0014b0:	2b04      	cmp	r3, #4
1a0014b2:	d027      	beq.n	1a001504 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a0014b4:	4816      	ldr	r0, [pc, #88]	; (1a001510 <Chip_Clock_GetClockInputHz+0xa4>)
1a0014b6:	e024      	b.n	1a001502 <Chip_Clock_GetClockInputHz+0x96>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a0014b8:	4b16      	ldr	r3, [pc, #88]	; (1a001514 <Chip_Clock_GetClockInputHz+0xa8>)
1a0014ba:	6818      	ldr	r0, [r3, #0]
		break;
1a0014bc:	e021      	b.n	1a001502 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a0014be:	4b16      	ldr	r3, [pc, #88]	; (1a001518 <Chip_Clock_GetClockInputHz+0xac>)
1a0014c0:	6818      	ldr	r0, [r3, #0]
		break;
1a0014c2:	e01e      	b.n	1a001502 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a0014c4:	4b15      	ldr	r3, [pc, #84]	; (1a00151c <Chip_Clock_GetClockInputHz+0xb0>)
1a0014c6:	6818      	ldr	r0, [r3, #0]
		break;
1a0014c8:	e01b      	b.n	1a001502 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a0014ca:	4b14      	ldr	r3, [pc, #80]	; (1a00151c <Chip_Clock_GetClockInputHz+0xb0>)
1a0014cc:	6858      	ldr	r0, [r3, #4]
		break;
1a0014ce:	e018      	b.n	1a001502 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a0014d0:	f000 f868 	bl	1a0015a4 <Chip_Clock_GetMainPLLHz>
		break;
1a0014d4:	e015      	b.n	1a001502 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a0014d6:	2100      	movs	r1, #0
1a0014d8:	f000 f89a 	bl	1a001610 <Chip_Clock_GetDivRate>
		break;
1a0014dc:	e011      	b.n	1a001502 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a0014de:	2101      	movs	r1, #1
1a0014e0:	f000 f896 	bl	1a001610 <Chip_Clock_GetDivRate>
		break;
1a0014e4:	e00d      	b.n	1a001502 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a0014e6:	2102      	movs	r1, #2
1a0014e8:	f000 f892 	bl	1a001610 <Chip_Clock_GetDivRate>
		break;
1a0014ec:	e009      	b.n	1a001502 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a0014ee:	2103      	movs	r1, #3
1a0014f0:	f000 f88e 	bl	1a001610 <Chip_Clock_GetDivRate>
		break;
1a0014f4:	e005      	b.n	1a001502 <Chip_Clock_GetClockInputHz+0x96>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a0014f6:	2104      	movs	r1, #4
1a0014f8:	f000 f88a 	bl	1a001610 <Chip_Clock_GetDivRate>
		break;
1a0014fc:	e001      	b.n	1a001502 <Chip_Clock_GetClockInputHz+0x96>
		rate = CRYSTAL_32K_FREQ_IN;
1a0014fe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a001502:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
1a001504:	4806      	ldr	r0, [pc, #24]	; (1a001520 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a001506:	e7fc      	b.n	1a001502 <Chip_Clock_GetClockInputHz+0x96>
1a001508:	00b71b00 	.word	0x00b71b00
1a00150c:	40043000 	.word	0x40043000
1a001510:	017d7840 	.word	0x017d7840
1a001514:	1a00219c 	.word	0x1a00219c
1a001518:	1a0021c8 	.word	0x1a0021c8
1a00151c:	100000bc 	.word	0x100000bc
1a001520:	02faf080 	.word	0x02faf080

1a001524 <Chip_Clock_CalcMainPLLValue>:
{
1a001524:	b538      	push	{r3, r4, r5, lr}
1a001526:	4605      	mov	r5, r0
1a001528:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a00152a:	7908      	ldrb	r0, [r1, #4]
1a00152c:	f7ff ff9e 	bl	1a00146c <Chip_Clock_GetClockInputHz>
1a001530:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a001532:	4b19      	ldr	r3, [pc, #100]	; (1a001598 <Chip_Clock_CalcMainPLLValue+0x74>)
1a001534:	442b      	add	r3, r5
1a001536:	4a19      	ldr	r2, [pc, #100]	; (1a00159c <Chip_Clock_CalcMainPLLValue+0x78>)
1a001538:	4293      	cmp	r3, r2
1a00153a:	d821      	bhi.n	1a001580 <Chip_Clock_CalcMainPLLValue+0x5c>
1a00153c:	b318      	cbz	r0, 1a001586 <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a00153e:	2380      	movs	r3, #128	; 0x80
1a001540:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a001542:	2300      	movs	r3, #0
1a001544:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a001546:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a001548:	fbb5 f3f0 	udiv	r3, r5, r0
1a00154c:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a00154e:	4a14      	ldr	r2, [pc, #80]	; (1a0015a0 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a001550:	4295      	cmp	r5, r2
1a001552:	d903      	bls.n	1a00155c <Chip_Clock_CalcMainPLLValue+0x38>
1a001554:	fb03 f000 	mul.w	r0, r3, r0
1a001558:	42a8      	cmp	r0, r5
1a00155a:	d007      	beq.n	1a00156c <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a00155c:	4621      	mov	r1, r4
1a00155e:	4628      	mov	r0, r5
1a001560:	f7ff fe96 	bl	1a001290 <pll_get_frac>
		if (!ppll->nsel) {
1a001564:	68a3      	ldr	r3, [r4, #8]
1a001566:	b18b      	cbz	r3, 1a00158c <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a001568:	3b01      	subs	r3, #1
1a00156a:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a00156c:	6923      	ldr	r3, [r4, #16]
1a00156e:	b183      	cbz	r3, 1a001592 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a001570:	68e2      	ldr	r2, [r4, #12]
1a001572:	b10a      	cbz	r2, 1a001578 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a001574:	3a01      	subs	r2, #1
1a001576:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a001578:	3b01      	subs	r3, #1
1a00157a:	6123      	str	r3, [r4, #16]
	return 0;
1a00157c:	2000      	movs	r0, #0
}
1a00157e:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a001580:	f04f 30ff 	mov.w	r0, #4294967295
1a001584:	e7fb      	b.n	1a00157e <Chip_Clock_CalcMainPLLValue+0x5a>
1a001586:	f04f 30ff 	mov.w	r0, #4294967295
1a00158a:	e7f8      	b.n	1a00157e <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a00158c:	f04f 30ff 	mov.w	r0, #4294967295
1a001590:	e7f5      	b.n	1a00157e <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a001592:	f04f 30ff 	mov.w	r0, #4294967295
1a001596:	e7f2      	b.n	1a00157e <Chip_Clock_CalcMainPLLValue+0x5a>
1a001598:	ff6b3a10 	.word	0xff6b3a10
1a00159c:	0b940510 	.word	0x0b940510
1a0015a0:	094c5eff 	.word	0x094c5eff

1a0015a4 <Chip_Clock_GetMainPLLHz>:
{
1a0015a4:	b530      	push	{r4, r5, lr}
1a0015a6:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a0015a8:	4d17      	ldr	r5, [pc, #92]	; (1a001608 <Chip_Clock_GetMainPLLHz+0x64>)
1a0015aa:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a0015ac:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a0015b0:	f7ff ff5c 	bl	1a00146c <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a0015b4:	4b15      	ldr	r3, [pc, #84]	; (1a00160c <Chip_Clock_GetMainPLLHz+0x68>)
1a0015b6:	681b      	ldr	r3, [r3, #0]
1a0015b8:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a0015ba:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a0015bc:	f013 0f01 	tst.w	r3, #1
1a0015c0:	d020      	beq.n	1a001604 <Chip_Clock_GetMainPLLHz+0x60>
	msel = (PLLReg >> 16) & 0xFF;
1a0015c2:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a0015c6:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a0015ca:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a0015ce:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a0015d2:	3301      	adds	r3, #1
	n = nsel + 1;
1a0015d4:	3201      	adds	r2, #1
	p = ptab[psel];
1a0015d6:	f10d 0c08 	add.w	ip, sp, #8
1a0015da:	4461      	add	r1, ip
1a0015dc:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a0015e0:	f014 0f80 	tst.w	r4, #128	; 0x80
1a0015e4:	d108      	bne.n	1a0015f8 <Chip_Clock_GetMainPLLHz+0x54>
1a0015e6:	b93d      	cbnz	r5, 1a0015f8 <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a0015e8:	0049      	lsls	r1, r1, #1
1a0015ea:	fbb3 f3f1 	udiv	r3, r3, r1
1a0015ee:	fbb0 f0f2 	udiv	r0, r0, r2
1a0015f2:	fb00 f003 	mul.w	r0, r0, r3
1a0015f6:	e003      	b.n	1a001600 <Chip_Clock_GetMainPLLHz+0x5c>
		return m * (freq / n);
1a0015f8:	fbb0 f0f2 	udiv	r0, r0, r2
1a0015fc:	fb03 f000 	mul.w	r0, r3, r0
}
1a001600:	b003      	add	sp, #12
1a001602:	bd30      	pop	{r4, r5, pc}
		return 0;
1a001604:	2000      	movs	r0, #0
1a001606:	e7fb      	b.n	1a001600 <Chip_Clock_GetMainPLLHz+0x5c>
1a001608:	40050000 	.word	0x40050000
1a00160c:	1a002214 	.word	0x1a002214

1a001610 <Chip_Clock_GetDivRate>:
{
1a001610:	b538      	push	{r3, r4, r5, lr}
1a001612:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a001614:	4608      	mov	r0, r1
1a001616:	f7ff ff0d 	bl	1a001434 <Chip_Clock_GetDividerSource>
1a00161a:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a00161c:	4620      	mov	r0, r4
1a00161e:	f7ff ff17 	bl	1a001450 <Chip_Clock_GetDividerDivisor>
1a001622:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a001624:	4628      	mov	r0, r5
1a001626:	f7ff ff21 	bl	1a00146c <Chip_Clock_GetClockInputHz>
1a00162a:	3401      	adds	r4, #1
}
1a00162c:	fbb0 f0f4 	udiv	r0, r0, r4
1a001630:	bd38      	pop	{r3, r4, r5, pc}
1a001632:	Address 0x1a001632 is out of bounds.


1a001634 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a001634:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a001636:	f100 0416 	add.w	r4, r0, #22
1a00163a:	00a4      	lsls	r4, r4, #2
1a00163c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a001640:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a001644:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a001646:	281b      	cmp	r0, #27
1a001648:	d813      	bhi.n	1a001672 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a00164a:	2911      	cmp	r1, #17
1a00164c:	d01a      	beq.n	1a001684 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a00164e:	4d0e      	ldr	r5, [pc, #56]	; (1a001688 <Chip_Clock_SetBaseClock+0x54>)
1a001650:	4025      	ands	r5, r4

			if (autoblocken) {
1a001652:	b10a      	cbz	r2, 1a001658 <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a001654:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a001658:	b10b      	cbz	r3, 1a00165e <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a00165a:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a00165e:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a001662:	3016      	adds	r0, #22
1a001664:	0080      	lsls	r0, r0, #2
1a001666:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00166a:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00166e:	6045      	str	r5, [r0, #4]
1a001670:	e008      	b.n	1a001684 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a001672:	f044 0401 	orr.w	r4, r4, #1
1a001676:	3016      	adds	r0, #22
1a001678:	0080      	lsls	r0, r0, #2
1a00167a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00167e:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001682:	6044      	str	r4, [r0, #4]
	}
}
1a001684:	bc30      	pop	{r4, r5}
1a001686:	4770      	bx	lr
1a001688:	e0fff7fe 	.word	0xe0fff7fe

1a00168c <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a00168c:	281b      	cmp	r0, #27
1a00168e:	d80c      	bhi.n	1a0016aa <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a001690:	3016      	adds	r0, #22
1a001692:	0080      	lsls	r0, r0, #2
1a001694:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001698:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a00169c:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a00169e:	f010 0f01 	tst.w	r0, #1
1a0016a2:	d104      	bne.n	1a0016ae <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0016a4:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0016a8:	4770      	bx	lr
		return CLKINPUT_PD;
1a0016aa:	2011      	movs	r0, #17
1a0016ac:	4770      	bx	lr
		return CLKINPUT_PD;
1a0016ae:	2011      	movs	r0, #17
}
1a0016b0:	4770      	bx	lr

1a0016b2 <Chip_Clock_GetBaseClocktHz>:
{
1a0016b2:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a0016b4:	f7ff ffea 	bl	1a00168c <Chip_Clock_GetBaseClock>
1a0016b8:	f7ff fed8 	bl	1a00146c <Chip_Clock_GetClockInputHz>
}
1a0016bc:	bd08      	pop	{r3, pc}
1a0016be:	Address 0x1a0016be is out of bounds.


1a0016c0 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a0016c0:	b971      	cbnz	r1, 1a0016e0 <Chip_Clock_EnableOpts+0x20>
	uint32_t reg = 1;
1a0016c2:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a0016c4:	b10a      	cbz	r2, 1a0016ca <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a0016c6:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a0016ca:	2b02      	cmp	r3, #2
1a0016cc:	d00a      	beq.n	1a0016e4 <Chip_Clock_EnableOpts+0x24>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a0016ce:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0016d2:	d30a      	bcc.n	1a0016ea <Chip_Clock_EnableOpts+0x2a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a0016d4:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0016d8:	4b06      	ldr	r3, [pc, #24]	; (1a0016f4 <Chip_Clock_EnableOpts+0x34>)
1a0016da:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a0016de:	4770      	bx	lr
		reg |= (1 << 1);
1a0016e0:	2103      	movs	r1, #3
1a0016e2:	e7ef      	b.n	1a0016c4 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a0016e4:	f041 0120 	orr.w	r1, r1, #32
1a0016e8:	e7f1      	b.n	1a0016ce <Chip_Clock_EnableOpts+0xe>
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a0016ea:	3020      	adds	r0, #32
1a0016ec:	4b02      	ldr	r3, [pc, #8]	; (1a0016f8 <Chip_Clock_EnableOpts+0x38>)
1a0016ee:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a0016f2:	4770      	bx	lr
1a0016f4:	40052000 	.word	0x40052000
1a0016f8:	40051000 	.word	0x40051000

1a0016fc <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a0016fc:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001700:	d309      	bcc.n	1a001716 <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a001702:	4a09      	ldr	r2, [pc, #36]	; (1a001728 <Chip_Clock_Enable+0x2c>)
1a001704:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001708:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a00170c:	f043 0301 	orr.w	r3, r3, #1
1a001710:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a001714:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a001716:	4a05      	ldr	r2, [pc, #20]	; (1a00172c <Chip_Clock_Enable+0x30>)
1a001718:	3020      	adds	r0, #32
1a00171a:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a00171e:	f043 0301 	orr.w	r3, r3, #1
1a001722:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a001726:	4770      	bx	lr
1a001728:	40052000 	.word	0x40052000
1a00172c:	40051000 	.word	0x40051000

1a001730 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a001730:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a001732:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001736:	d309      	bcc.n	1a00174c <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a001738:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a00173c:	4a0d      	ldr	r2, [pc, #52]	; (1a001774 <Chip_Clock_GetRate+0x44>)
1a00173e:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a001742:	f014 0f01 	tst.w	r4, #1
1a001746:	d107      	bne.n	1a001758 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a001748:	2000      	movs	r0, #0
	}

	return rate;
}
1a00174a:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a00174c:	f100 0320 	add.w	r3, r0, #32
1a001750:	4a09      	ldr	r2, [pc, #36]	; (1a001778 <Chip_Clock_GetRate+0x48>)
1a001752:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a001756:	e7f4      	b.n	1a001742 <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a001758:	f7ff fe20 	bl	1a00139c <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a00175c:	f7ff ffa9 	bl	1a0016b2 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a001760:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a001764:	d103      	bne.n	1a00176e <Chip_Clock_GetRate+0x3e>
			div = 1;
1a001766:	2301      	movs	r3, #1
		rate = rate / div;
1a001768:	fbb0 f0f3 	udiv	r0, r0, r3
1a00176c:	e7ed      	b.n	1a00174a <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a00176e:	2302      	movs	r3, #2
1a001770:	e7fa      	b.n	1a001768 <Chip_Clock_GetRate+0x38>
1a001772:	bf00      	nop
1a001774:	40052000 	.word	0x40052000
1a001778:	40051000 	.word	0x40051000

1a00177c <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a00177c:	4b09      	ldr	r3, [pc, #36]	; (1a0017a4 <Chip_UART_GetIndex+0x28>)
1a00177e:	4298      	cmp	r0, r3
1a001780:	d009      	beq.n	1a001796 <Chip_UART_GetIndex+0x1a>
1a001782:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a001786:	4298      	cmp	r0, r3
1a001788:	d007      	beq.n	1a00179a <Chip_UART_GetIndex+0x1e>
1a00178a:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a00178e:	4298      	cmp	r0, r3
1a001790:	d005      	beq.n	1a00179e <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a001792:	2000      	movs	r0, #0
1a001794:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a001796:	2002      	movs	r0, #2
1a001798:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a00179a:	2003      	movs	r0, #3
1a00179c:	4770      	bx	lr
			return 1;
1a00179e:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a0017a0:	4770      	bx	lr
1a0017a2:	bf00      	nop
1a0017a4:	400c1000 	.word	0x400c1000

1a0017a8 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a0017a8:	b530      	push	{r4, r5, lr}
1a0017aa:	b083      	sub	sp, #12
1a0017ac:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a0017ae:	f7ff ffe5 	bl	1a00177c <Chip_UART_GetIndex>
1a0017b2:	2301      	movs	r3, #1
1a0017b4:	461a      	mov	r2, r3
1a0017b6:	4619      	mov	r1, r3
1a0017b8:	4d0e      	ldr	r5, [pc, #56]	; (1a0017f4 <Chip_UART_Init+0x4c>)
1a0017ba:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a0017be:	f7ff ff7f 	bl	1a0016c0 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a0017c2:	2307      	movs	r3, #7
1a0017c4:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a0017c6:	2300      	movs	r3, #0
1a0017c8:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a0017ca:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a0017cc:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a0017ce:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a0017d0:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a0017d2:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a0017d4:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a0017d6:	4b08      	ldr	r3, [pc, #32]	; (1a0017f8 <Chip_UART_Init+0x50>)
1a0017d8:	429c      	cmp	r4, r3
1a0017da:	d006      	beq.n	1a0017ea <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a0017dc:	2303      	movs	r3, #3
1a0017de:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a0017e0:	2310      	movs	r3, #16
1a0017e2:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a0017e4:	9b01      	ldr	r3, [sp, #4]
}
1a0017e6:	b003      	add	sp, #12
1a0017e8:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a0017ea:	2300      	movs	r3, #0
1a0017ec:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a0017ee:	69a3      	ldr	r3, [r4, #24]
1a0017f0:	9301      	str	r3, [sp, #4]
1a0017f2:	e7f3      	b.n	1a0017dc <Chip_UART_Init+0x34>
1a0017f4:	1a002294 	.word	0x1a002294
1a0017f8:	40082000 	.word	0x40082000

1a0017fc <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a0017fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001800:	b083      	sub	sp, #12
1a001802:	9001      	str	r0, [sp, #4]
1a001804:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a001806:	f7ff ffb9 	bl	1a00177c <Chip_UART_GetIndex>
1a00180a:	4b32      	ldr	r3, [pc, #200]	; (1a0018d4 <Chip_UART_SetBaudFDR+0xd8>)
1a00180c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a001810:	f7ff ff8e 	bl	1a001730 <Chip_Clock_GetRate>
1a001814:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a001816:	f04f 37ff 	mov.w	r7, #4294967295

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a00181a:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a00181c:	f04f 0b00 	mov.w	fp, #0
1a001820:	46a2      	mov	sl, r4
1a001822:	46d9      	mov	r9, fp
	for (m = 1; odiff && m < 16; m++) {
1a001824:	e02a      	b.n	1a00187c <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a001826:	4242      	negs	r2, r0
				div ++;
1a001828:	1c4b      	adds	r3, r1, #1
1a00182a:	e017      	b.n	1a00185c <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a00182c:	b30a      	cbz	r2, 1a001872 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a00182e:	4617      	mov	r7, r2
			sd = d;
1a001830:	46ab      	mov	fp, r5
			sm = m;
1a001832:	46a2      	mov	sl, r4
			sdiv = div;
1a001834:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a001836:	3501      	adds	r5, #1
1a001838:	42ac      	cmp	r4, r5
1a00183a:	d91e      	bls.n	1a00187a <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a00183c:	0933      	lsrs	r3, r6, #4
1a00183e:	0730      	lsls	r0, r6, #28
1a001840:	fba4 0100 	umull	r0, r1, r4, r0
1a001844:	fb04 1103 	mla	r1, r4, r3, r1
1a001848:	1962      	adds	r2, r4, r5
1a00184a:	fb08 f202 	mul.w	r2, r8, r2
1a00184e:	2300      	movs	r3, #0
1a001850:	f000 fa88 	bl	1a001d64 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a001854:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a001856:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a001858:	2800      	cmp	r0, #0
1a00185a:	dbe4      	blt.n	1a001826 <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a00185c:	4297      	cmp	r7, r2
1a00185e:	d3ea      	bcc.n	1a001836 <Chip_UART_SetBaudFDR+0x3a>
1a001860:	2b00      	cmp	r3, #0
1a001862:	d0e8      	beq.n	1a001836 <Chip_UART_SetBaudFDR+0x3a>
1a001864:	0c19      	lsrs	r1, r3, #16
1a001866:	d1e6      	bne.n	1a001836 <Chip_UART_SetBaudFDR+0x3a>
1a001868:	2b02      	cmp	r3, #2
1a00186a:	d8df      	bhi.n	1a00182c <Chip_UART_SetBaudFDR+0x30>
1a00186c:	2d00      	cmp	r5, #0
1a00186e:	d0dd      	beq.n	1a00182c <Chip_UART_SetBaudFDR+0x30>
1a001870:	e7e1      	b.n	1a001836 <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a001872:	4617      	mov	r7, r2
			sd = d;
1a001874:	46ab      	mov	fp, r5
			sm = m;
1a001876:	46a2      	mov	sl, r4
			sdiv = div;
1a001878:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a00187a:	3401      	adds	r4, #1
1a00187c:	b11f      	cbz	r7, 1a001886 <Chip_UART_SetBaudFDR+0x8a>
1a00187e:	2c0f      	cmp	r4, #15
1a001880:	d801      	bhi.n	1a001886 <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a001882:	2500      	movs	r5, #0
1a001884:	e7d8      	b.n	1a001838 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a001886:	f1b9 0f00 	cmp.w	r9, #0
1a00188a:	d01e      	beq.n	1a0018ca <Chip_UART_SetBaudFDR+0xce>
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a00188c:	9a01      	ldr	r2, [sp, #4]
1a00188e:	4611      	mov	r1, r2
1a001890:	68d3      	ldr	r3, [r2, #12]
1a001892:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a001896:	60d3      	str	r3, [r2, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a001898:	fa5f f389 	uxtb.w	r3, r9
1a00189c:	6013      	str	r3, [r2, #0]
	pUART->DLM = (uint32_t) dlm;
1a00189e:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a0018a2:	6053      	str	r3, [r2, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0018a4:	68d3      	ldr	r3, [r2, #12]
1a0018a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0018aa:	60d3      	str	r3, [r2, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a0018ac:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a0018b0:	b2db      	uxtb	r3, r3
1a0018b2:	f00b 020f 	and.w	r2, fp, #15
1a0018b6:	4313      	orrs	r3, r2
1a0018b8:	628b      	str	r3, [r1, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a0018ba:	0933      	lsrs	r3, r6, #4
1a0018bc:	fb0a f303 	mul.w	r3, sl, r3
1a0018c0:	44da      	add	sl, fp
1a0018c2:	fb09 f90a 	mul.w	r9, r9, sl
1a0018c6:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a0018ca:	4648      	mov	r0, r9
1a0018cc:	b003      	add	sp, #12
1a0018ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0018d2:	bf00      	nop
1a0018d4:	1a00228c 	.word	0x1a00228c

1a0018d8 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a0018d8:	b508      	push	{r3, lr}
   extern void *g_pfnVectors;
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a0018da:	4a0b      	ldr	r2, [pc, #44]	; (1a001908 <SystemInit+0x30>)
1a0018dc:	4b0b      	ldr	r3, [pc, #44]	; (1a00190c <SystemInit+0x34>)
1a0018de:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a0018e0:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a0018e4:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a0018e6:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a0018ea:	2b20      	cmp	r3, #32
1a0018ec:	d004      	beq.n	1a0018f8 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a0018ee:	f7ff f941 	bl	1a000b74 <Board_SystemInit>
   Board_Init();
1a0018f2:	f7ff f9ff 	bl	1a000cf4 <Board_Init>
}
1a0018f6:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a0018f8:	4a04      	ldr	r2, [pc, #16]	; (1a00190c <SystemInit+0x34>)
1a0018fa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a0018fe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a001902:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a001906:	e7f2      	b.n	1a0018ee <SystemInit+0x16>
1a001908:	1a000000 	.word	0x1a000000
1a00190c:	e000ed00 	.word	0xe000ed00

1a001910 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a001910:	4b04      	ldr	r3, [pc, #16]	; (1a001924 <cyclesCounterInit+0x14>)
1a001912:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a001914:	4a04      	ldr	r2, [pc, #16]	; (1a001928 <cyclesCounterInit+0x18>)
1a001916:	6813      	ldr	r3, [r2, #0]
1a001918:	f043 0301 	orr.w	r3, r3, #1
1a00191c:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a00191e:	2001      	movs	r0, #1
1a001920:	4770      	bx	lr
1a001922:	bf00      	nop
1a001924:	10000038 	.word	0x10000038
1a001928:	e0001000 	.word	0xe0001000

1a00192c <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a00192c:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a00192e:	4d0b      	ldr	r5, [pc, #44]	; (1a00195c <gpioObtainPinInit+0x30>)
1a001930:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a001934:	182c      	adds	r4, r5, r0
1a001936:	5628      	ldrsb	r0, [r5, r0]
1a001938:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a00193a:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a00193e:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a001940:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a001944:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a001946:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a00194a:	9b02      	ldr	r3, [sp, #8]
1a00194c:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a00194e:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a001952:	9b03      	ldr	r3, [sp, #12]
1a001954:	701a      	strb	r2, [r3, #0]
}
1a001956:	bc30      	pop	{r4, r5}
1a001958:	4770      	bx	lr
1a00195a:	bf00      	nop
1a00195c:	1a00229c 	.word	0x1a00229c

1a001960 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a001960:	f110 0f02 	cmn.w	r0, #2
1a001964:	f000 80c7 	beq.w	1a001af6 <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a001968:	f1b0 3fff 	cmp.w	r0, #4294967295
1a00196c:	f000 80c5 	beq.w	1a001afa <gpioInit+0x19a>
{
1a001970:	b570      	push	{r4, r5, r6, lr}
1a001972:	b084      	sub	sp, #16
1a001974:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a001976:	2300      	movs	r3, #0
1a001978:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a00197c:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001980:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001984:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001988:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a00198c:	f10d 030b 	add.w	r3, sp, #11
1a001990:	9301      	str	r3, [sp, #4]
1a001992:	ab03      	add	r3, sp, #12
1a001994:	9300      	str	r3, [sp, #0]
1a001996:	f10d 030d 	add.w	r3, sp, #13
1a00199a:	f10d 020e 	add.w	r2, sp, #14
1a00199e:	f10d 010f 	add.w	r1, sp, #15
1a0019a2:	f7ff ffc3 	bl	1a00192c <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a0019a6:	2c05      	cmp	r4, #5
1a0019a8:	f200 80a9 	bhi.w	1a001afe <gpioInit+0x19e>
1a0019ac:	e8df f004 	tbb	[pc, r4]
1a0019b0:	45278109 	.word	0x45278109
1a0019b4:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a0019b6:	4853      	ldr	r0, [pc, #332]	; (1a001b04 <gpioInit+0x1a4>)
1a0019b8:	f7ff fafe 	bl	1a000fb8 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a0019bc:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a0019be:	b004      	add	sp, #16
1a0019c0:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a0019c2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0019c6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0019ca:	f89d 200d 	ldrb.w	r2, [sp, #13]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0019ce:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0019d2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0019d6:	494c      	ldr	r1, [pc, #304]	; (1a001b08 <gpioInit+0x1a8>)
1a0019d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0019dc:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0019e0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0019e4:	2001      	movs	r0, #1
1a0019e6:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a0019ea:	4c46      	ldr	r4, [pc, #280]	; (1a001b04 <gpioInit+0x1a4>)
1a0019ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0019f0:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0019f4:	ea22 0201 	bic.w	r2, r2, r1
1a0019f8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0019fc:	e7df      	b.n	1a0019be <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0019fe:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001a02:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001a06:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001a0a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a001a0e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001a12:	493d      	ldr	r1, [pc, #244]	; (1a001b08 <gpioInit+0x1a8>)
1a001a14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001a18:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001a1c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001a20:	2001      	movs	r0, #1
1a001a22:	fa00 f102 	lsl.w	r1, r0, r2
1a001a26:	4c37      	ldr	r4, [pc, #220]	; (1a001b04 <gpioInit+0x1a4>)
1a001a28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001a2c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001a30:	ea22 0201 	bic.w	r2, r2, r1
1a001a34:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001a38:	e7c1      	b.n	1a0019be <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a001a3a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001a3e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001a42:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001a46:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a001a4a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001a4e:	492e      	ldr	r1, [pc, #184]	; (1a001b08 <gpioInit+0x1a8>)
1a001a50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001a54:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001a58:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001a5c:	2001      	movs	r0, #1
1a001a5e:	fa00 f102 	lsl.w	r1, r0, r2
1a001a62:	4c28      	ldr	r4, [pc, #160]	; (1a001b04 <gpioInit+0x1a4>)
1a001a64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001a68:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001a6c:	ea22 0201 	bic.w	r2, r2, r1
1a001a70:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001a74:	e7a3      	b.n	1a0019be <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a001a76:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001a7a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001a7e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001a82:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a001a86:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001a8a:	491f      	ldr	r1, [pc, #124]	; (1a001b08 <gpioInit+0x1a8>)
1a001a8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001a90:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001a94:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001a98:	2001      	movs	r0, #1
1a001a9a:	fa00 f102 	lsl.w	r1, r0, r2
1a001a9e:	4c19      	ldr	r4, [pc, #100]	; (1a001b04 <gpioInit+0x1a4>)
1a001aa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001aa4:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001aa8:	ea22 0201 	bic.w	r2, r2, r1
1a001aac:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001ab0:	e785      	b.n	1a0019be <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a001ab2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001ab6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001aba:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001abe:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a001ac2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001ac6:	4910      	ldr	r1, [pc, #64]	; (1a001b08 <gpioInit+0x1a8>)
1a001ac8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a001acc:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a001ad0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001ad4:	2001      	movs	r0, #1
1a001ad6:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a001ada:	4b0a      	ldr	r3, [pc, #40]	; (1a001b04 <gpioInit+0x1a4>)
1a001adc:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a001ae0:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a001ae4:	4331      	orrs	r1, r6
1a001ae6:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a001aea:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a001aec:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a001af0:	2100      	movs	r1, #0
1a001af2:	5499      	strb	r1, [r3, r2]
1a001af4:	e763      	b.n	1a0019be <gpioInit+0x5e>
	  return FALSE;
1a001af6:	2000      	movs	r0, #0
1a001af8:	4770      	bx	lr
	  return FALSE;
1a001afa:	2000      	movs	r0, #0
}
1a001afc:	4770      	bx	lr
      ret_val = 0;
1a001afe:	2000      	movs	r0, #0
1a001b00:	e75d      	b.n	1a0019be <gpioInit+0x5e>
1a001b02:	bf00      	nop
1a001b04:	400f4000 	.word	0x400f4000
1a001b08:	40086000 	.word	0x40086000

1a001b0c <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
   if( pin == VCC ){
1a001b0c:	f110 0f02 	cmn.w	r0, #2
1a001b10:	d02d      	beq.n	1a001b6e <gpioWrite+0x62>
	  return FALSE;
   }
   if( pin == GND ){
1a001b12:	f1b0 3fff 	cmp.w	r0, #4294967295
1a001b16:	d02c      	beq.n	1a001b72 <gpioWrite+0x66>
{
1a001b18:	b510      	push	{r4, lr}
1a001b1a:	b084      	sub	sp, #16
1a001b1c:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a001b1e:	2300      	movs	r3, #0
1a001b20:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001b24:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001b28:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001b2c:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001b30:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001b34:	f10d 030b 	add.w	r3, sp, #11
1a001b38:	9301      	str	r3, [sp, #4]
1a001b3a:	ab03      	add	r3, sp, #12
1a001b3c:	9300      	str	r3, [sp, #0]
1a001b3e:	f10d 030d 	add.w	r3, sp, #13
1a001b42:	f10d 020e 	add.w	r2, sp, #14
1a001b46:	f10d 010f 	add.w	r1, sp, #15
1a001b4a:	f7ff feef 	bl	1a00192c <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a001b4e:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001b52:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a001b56:	1c21      	adds	r1, r4, #0
1a001b58:	bf18      	it	ne
1a001b5a:	2101      	movne	r1, #1
1a001b5c:	015b      	lsls	r3, r3, #5
1a001b5e:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a001b62:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a001b66:	5499      	strb	r1, [r3, r2]

   return ret_val;
1a001b68:	2001      	movs	r0, #1
}
1a001b6a:	b004      	add	sp, #16
1a001b6c:	bd10      	pop	{r4, pc}
	  return FALSE;
1a001b6e:	2000      	movs	r0, #0
1a001b70:	4770      	bx	lr
	  return FALSE;
1a001b72:	2000      	movs	r0, #0
}
1a001b74:	4770      	bx	lr
1a001b76:	Address 0x1a001b76 is out of bounds.


1a001b78 <spiInit>:
bool_t spiInit( spiMap_t spi )
{

   bool_t retVal = TRUE;

   if( spi == SPI0 ) {
1a001b78:	b108      	cbz	r0, 1a001b7e <spiInit+0x6>
      #else
         #error BOARD compile variable must be defined
      #endif

   } else {
      retVal = FALSE;
1a001b7a:	2000      	movs	r0, #0
   }

   return retVal;
}
1a001b7c:	4770      	bx	lr
{
1a001b7e:	b570      	push	{r4, r5, r6, lr}
1a001b80:	4c0e      	ldr	r4, [pc, #56]	; (1a001bbc <spiInit+0x44>)
1a001b82:	2600      	movs	r6, #0
1a001b84:	f8c4 6790 	str.w	r6, [r4, #1936]	; 0x790
1a001b88:	23c5      	movs	r3, #197	; 0xc5
1a001b8a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
1a001b8e:	2305      	movs	r3, #5
1a001b90:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
         Chip_SSP_Init( LPC_SSP1 );
1a001b94:	4d0a      	ldr	r5, [pc, #40]	; (1a001bc0 <spiInit+0x48>)
1a001b96:	4628      	mov	r0, r5
1a001b98:	f7ff f9b4 	bl	1a000f04 <Chip_SSP_Init>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a001b9c:	686b      	ldr	r3, [r5, #4]
1a001b9e:	f043 0302 	orr.w	r3, r3, #2
1a001ba2:	606b      	str	r3, [r5, #4]
1a001ba4:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
	pGPIO->DIR[port] |= 1UL << pin;
1a001ba8:	4906      	ldr	r1, [pc, #24]	; (1a001bc4 <spiInit+0x4c>)
1a001baa:	f242 020c 	movw	r2, #8204	; 0x200c
1a001bae:	588b      	ldr	r3, [r1, r2]
1a001bb0:	f043 0301 	orr.w	r3, r3, #1
1a001bb4:	508b      	str	r3, [r1, r2]
   bool_t retVal = TRUE;
1a001bb6:	2001      	movs	r0, #1
}
1a001bb8:	bd70      	pop	{r4, r5, r6, pc}
1a001bba:	bf00      	nop
1a001bbc:	40086000 	.word	0x40086000
1a001bc0:	400c5000 	.word	0x400c5000
1a001bc4:	400f4000 	.word	0x400f4000

1a001bc8 <spiWrite>:
   return retVal;
}


bool_t spiWrite( spiMap_t spi, uint8_t* buffer, uint32_t bufferSize)
{
1a001bc8:	b500      	push	{lr}
1a001bca:	b087      	sub	sp, #28

   bool_t retVal = TRUE;

   Chip_SSP_DATA_SETUP_T xferConfig;

   xferConfig.tx_data = buffer;
1a001bcc:	9101      	str	r1, [sp, #4]
   xferConfig.tx_cnt  = 0;
1a001bce:	2300      	movs	r3, #0
1a001bd0:	9302      	str	r3, [sp, #8]
   xferConfig.rx_data = NULL;
1a001bd2:	9303      	str	r3, [sp, #12]
   xferConfig.rx_cnt  = 0;
1a001bd4:	9304      	str	r3, [sp, #16]
   xferConfig.length  = bufferSize;
1a001bd6:	9205      	str	r2, [sp, #20]

   if( spi == SPI0 ) {
1a001bd8:	b118      	cbz	r0, 1a001be2 <spiWrite+0x1a>
      Chip_SSP_RWFrames_Blocking( LPC_SSP1, &xferConfig );
   } else {
      retVal = FALSE;
1a001bda:	2000      	movs	r0, #0
   }

   return retVal;
}
1a001bdc:	b007      	add	sp, #28
1a001bde:	f85d fb04 	ldr.w	pc, [sp], #4
      Chip_SSP_RWFrames_Blocking( LPC_SSP1, &xferConfig );
1a001be2:	a901      	add	r1, sp, #4
1a001be4:	4802      	ldr	r0, [pc, #8]	; (1a001bf0 <spiWrite+0x28>)
1a001be6:	f7ff f91a 	bl	1a000e1e <Chip_SSP_RWFrames_Blocking>
   bool_t retVal = TRUE;
1a001bea:	2001      	movs	r0, #1
1a001bec:	e7f6      	b.n	1a001bdc <spiWrite+0x14>
1a001bee:	bf00      	nop
1a001bf0:	400c5000 	.word	0x400c5000

1a001bf4 <tickCallbackSet>:
   #ifdef USE_FREERTOS
      uartWriteString( UART_USB, "Use of tickCallbackSet() in a program with freeRTOS has no effect\r\n" );
      return 0;
   #else
      bool_t retVal = TRUE;
      if( tickCallback != NULL ) {
1a001bf4:	b130      	cbz	r0, 1a001c04 <tickCallbackSet+0x10>
         tickHookFunction = tickCallback;
1a001bf6:	4a05      	ldr	r2, [pc, #20]	; (1a001c0c <tickCallbackSet+0x18>)
1a001bf8:	6010      	str	r0, [r2, #0]
      bool_t retVal = TRUE;
1a001bfa:	2001      	movs	r0, #1
      } else {
         retVal = FALSE;
      }
      if( tickCallbackParams != NULL ) {
1a001bfc:	b121      	cbz	r1, 1a001c08 <tickCallbackSet+0x14>
         callBackFuncParams = tickCallbackParams;
1a001bfe:	4b04      	ldr	r3, [pc, #16]	; (1a001c10 <tickCallbackSet+0x1c>)
1a001c00:	6019      	str	r1, [r3, #0]
1a001c02:	4770      	bx	lr
         retVal = FALSE;
1a001c04:	2000      	movs	r0, #0
1a001c06:	e7f9      	b.n	1a001bfc <tickCallbackSet+0x8>
      } else {
         retVal &= FALSE;
1a001c08:	2000      	movs	r0, #0
      }
      return retVal;
   #endif
}
1a001c0a:	4770      	bx	lr
1a001c0c:	100000d0 	.word	0x100000d0
1a001c10:	100000c4 	.word	0x100000c4

1a001c14 <tickPowerSet>:
void tickPowerSet( bool_t power )
{
   #ifdef USE_FREERTOS
      uartWriteString( UART_USB, "Use of tickPowerSet() in a program with freeRTOS has no effect\r\n" );
   #else
      if( power ) {
1a001c14:	b118      	cbz	r0, 1a001c1e <tickPowerSet+0xa>
         // Enable SysTick IRQ and SysTick Timer
         SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a001c16:	4b04      	ldr	r3, [pc, #16]	; (1a001c28 <tickPowerSet+0x14>)
1a001c18:	2207      	movs	r2, #7
1a001c1a:	601a      	str	r2, [r3, #0]
1a001c1c:	4770      	bx	lr
                         SysTick_CTRL_TICKINT_Msk   |
                         SysTick_CTRL_ENABLE_Msk;
      } else {
         // Disable SysTick IRQ and SysTick Timer
         SysTick->CTRL = 0x0000000;
1a001c1e:	4b02      	ldr	r3, [pc, #8]	; (1a001c28 <tickPowerSet+0x14>)
1a001c20:	2200      	movs	r2, #0
1a001c22:	601a      	str	r2, [r3, #0]
      }
   #endif
}
1a001c24:	4770      	bx	lr
1a001c26:	bf00      	nop
1a001c28:	e000e010 	.word	0xe000e010

1a001c2c <tickInit>:
{
1a001c2c:	b538      	push	{r3, r4, r5, lr}
      if( tickRateMSvalue == 0 ) {
1a001c2e:	ea50 0401 	orrs.w	r4, r0, r1
1a001c32:	d02a      	beq.n	1a001c8a <tickInit+0x5e>
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a001c34:	f110 32ff 	adds.w	r2, r0, #4294967295
1a001c38:	f141 33ff 	adc.w	r3, r1, #4294967295
1a001c3c:	2b00      	cmp	r3, #0
1a001c3e:	bf08      	it	eq
1a001c40:	2a32      	cmpeq	r2, #50	; 0x32
1a001c42:	d227      	bcs.n	1a001c94 <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a001c44:	4b14      	ldr	r3, [pc, #80]	; (1a001c98 <tickInit+0x6c>)
1a001c46:	e9c3 0100 	strd	r0, r1, [r3]
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a001c4a:	4b14      	ldr	r3, [pc, #80]	; (1a001c9c <tickInit+0x70>)
1a001c4c:	681b      	ldr	r3, [r3, #0]
1a001c4e:	fba3 4500 	umull	r4, r5, r3, r0
1a001c52:	fb03 5501 	mla	r5, r3, r1, r5
1a001c56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a001c5a:	2300      	movs	r3, #0
1a001c5c:	4620      	mov	r0, r4
1a001c5e:	4629      	mov	r1, r5
1a001c60:	f000 f880 	bl	1a001d64 <__aeabi_uldivmod>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a001c64:	3801      	subs	r0, #1
1a001c66:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a001c6a:	d209      	bcs.n	1a001c80 <tickInit+0x54>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a001c6c:	4b0c      	ldr	r3, [pc, #48]	; (1a001ca0 <tickInit+0x74>)
1a001c6e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a001c70:	4a0c      	ldr	r2, [pc, #48]	; (1a001ca4 <tickInit+0x78>)
1a001c72:	21e0      	movs	r1, #224	; 0xe0
1a001c74:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a001c78:	2200      	movs	r2, #0
1a001c7a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a001c7c:	2207      	movs	r2, #7
1a001c7e:	601a      	str	r2, [r3, #0]
            tickPowerSet( ON );
1a001c80:	2001      	movs	r0, #1
1a001c82:	f7ff ffc7 	bl	1a001c14 <tickPowerSet>
      bool_t ret_val = 1;
1a001c86:	2001      	movs	r0, #1
}
1a001c88:	bd38      	pop	{r3, r4, r5, pc}
         tickPowerSet( OFF );
1a001c8a:	2000      	movs	r0, #0
1a001c8c:	f7ff ffc2 	bl	1a001c14 <tickPowerSet>
         ret_val = 0;
1a001c90:	2000      	movs	r0, #0
1a001c92:	e7f9      	b.n	1a001c88 <tickInit+0x5c>
            ret_val = 0;
1a001c94:	2000      	movs	r0, #0
1a001c96:	e7f7      	b.n	1a001c88 <tickInit+0x5c>
1a001c98:	10000040 	.word	0x10000040
1a001c9c:	100000d8 	.word	0x100000d8
1a001ca0:	e000e010 	.word	0xe000e010
1a001ca4:	e000ed00 	.word	0xe000ed00

1a001ca8 <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a001ca8:	b508      	push	{r3, lr}
   // Increment Tick counters
   tickCounter++;
1a001caa:	4a07      	ldr	r2, [pc, #28]	; (1a001cc8 <SysTick_Handler+0x20>)
1a001cac:	6813      	ldr	r3, [r2, #0]
1a001cae:	6851      	ldr	r1, [r2, #4]
1a001cb0:	3301      	adds	r3, #1
1a001cb2:	f141 0100 	adc.w	r1, r1, #0
1a001cb6:	6013      	str	r3, [r2, #0]
1a001cb8:	6051      	str	r1, [r2, #4]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a001cba:	4b04      	ldr	r3, [pc, #16]	; (1a001ccc <SysTick_Handler+0x24>)
1a001cbc:	681b      	ldr	r3, [r3, #0]
1a001cbe:	b113      	cbz	r3, 1a001cc6 <SysTick_Handler+0x1e>
      (* tickHookFunction )( callBackFuncParams );
1a001cc0:	4a03      	ldr	r2, [pc, #12]	; (1a001cd0 <SysTick_Handler+0x28>)
1a001cc2:	6810      	ldr	r0, [r2, #0]
1a001cc4:	4798      	blx	r3
   }
}
1a001cc6:	bd08      	pop	{r3, pc}
1a001cc8:	100000c8 	.word	0x100000c8
1a001ccc:	100000d0 	.word	0x100000d0
1a001cd0:	100000c4 	.word	0x100000c4

1a001cd4 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a001cd4:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a001cd6:	4b04      	ldr	r3, [pc, #16]	; (1a001ce8 <USB0_IRQHandler+0x14>)
1a001cd8:	681b      	ldr	r3, [r3, #0]
1a001cda:	681b      	ldr	r3, [r3, #0]
1a001cdc:	68db      	ldr	r3, [r3, #12]
1a001cde:	4a03      	ldr	r2, [pc, #12]	; (1a001cec <USB0_IRQHandler+0x18>)
1a001ce0:	6810      	ldr	r0, [r2, #0]
1a001ce2:	4798      	blx	r3
}
1a001ce4:	bd08      	pop	{r3, pc}
1a001ce6:	bf00      	nop
1a001ce8:	100000dc 	.word	0x100000dc
1a001cec:	100000d4 	.word	0x100000d4

1a001cf0 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a001cf0:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a001cf2:	f7ff fa73 	bl	1a0011dc <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a001cf6:	4b1a      	ldr	r3, [pc, #104]	; (1a001d60 <boardInit+0x70>)
1a001cf8:	6818      	ldr	r0, [r3, #0]
1a001cfa:	f7ff fe09 	bl	1a001910 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms (si no se usa freeRTOS)
   #ifndef USE_FREERTOS
      tickInit( 1 );
1a001cfe:	2001      	movs	r0, #1
1a001d00:	2100      	movs	r1, #0
1a001d02:	f7ff ff93 	bl	1a001c2c <tickInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a001d06:	2105      	movs	r1, #5
1a001d08:	2000      	movs	r0, #0
1a001d0a:	f7ff fe29 	bl	1a001960 <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a001d0e:	2100      	movs	r1, #0
1a001d10:	2024      	movs	r0, #36	; 0x24
1a001d12:	f7ff fe25 	bl	1a001960 <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a001d16:	2100      	movs	r1, #0
1a001d18:	2025      	movs	r0, #37	; 0x25
1a001d1a:	f7ff fe21 	bl	1a001960 <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a001d1e:	2100      	movs	r1, #0
1a001d20:	2026      	movs	r0, #38	; 0x26
1a001d22:	f7ff fe1d 	bl	1a001960 <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a001d26:	2100      	movs	r1, #0
1a001d28:	2027      	movs	r0, #39	; 0x27
1a001d2a:	f7ff fe19 	bl	1a001960 <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a001d2e:	2101      	movs	r1, #1
1a001d30:	2028      	movs	r0, #40	; 0x28
1a001d32:	f7ff fe15 	bl	1a001960 <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a001d36:	2101      	movs	r1, #1
1a001d38:	2029      	movs	r0, #41	; 0x29
1a001d3a:	f7ff fe11 	bl	1a001960 <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a001d3e:	2101      	movs	r1, #1
1a001d40:	202a      	movs	r0, #42	; 0x2a
1a001d42:	f7ff fe0d 	bl	1a001960 <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a001d46:	2101      	movs	r1, #1
1a001d48:	202b      	movs	r0, #43	; 0x2b
1a001d4a:	f7ff fe09 	bl	1a001960 <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a001d4e:	2101      	movs	r1, #1
1a001d50:	202c      	movs	r0, #44	; 0x2c
1a001d52:	f7ff fe05 	bl	1a001960 <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a001d56:	2101      	movs	r1, #1
1a001d58:	202d      	movs	r0, #45	; 0x2d
1a001d5a:	f7ff fe01 	bl	1a001960 <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a001d5e:	bd08      	pop	{r3, pc}
1a001d60:	100000d8 	.word	0x100000d8

1a001d64 <__aeabi_uldivmod>:
1a001d64:	b953      	cbnz	r3, 1a001d7c <__aeabi_uldivmod+0x18>
1a001d66:	b94a      	cbnz	r2, 1a001d7c <__aeabi_uldivmod+0x18>
1a001d68:	2900      	cmp	r1, #0
1a001d6a:	bf08      	it	eq
1a001d6c:	2800      	cmpeq	r0, #0
1a001d6e:	bf1c      	itt	ne
1a001d70:	f04f 31ff 	movne.w	r1, #4294967295
1a001d74:	f04f 30ff 	movne.w	r0, #4294967295
1a001d78:	f000 b974 	b.w	1a002064 <__aeabi_idiv0>
1a001d7c:	f1ad 0c08 	sub.w	ip, sp, #8
1a001d80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a001d84:	f000 f806 	bl	1a001d94 <__udivmoddi4>
1a001d88:	f8dd e004 	ldr.w	lr, [sp, #4]
1a001d8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a001d90:	b004      	add	sp, #16
1a001d92:	4770      	bx	lr

1a001d94 <__udivmoddi4>:
1a001d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001d98:	9e08      	ldr	r6, [sp, #32]
1a001d9a:	4604      	mov	r4, r0
1a001d9c:	4688      	mov	r8, r1
1a001d9e:	2b00      	cmp	r3, #0
1a001da0:	f040 8085 	bne.w	1a001eae <__udivmoddi4+0x11a>
1a001da4:	428a      	cmp	r2, r1
1a001da6:	4615      	mov	r5, r2
1a001da8:	d948      	bls.n	1a001e3c <__udivmoddi4+0xa8>
1a001daa:	fab2 f282 	clz	r2, r2
1a001dae:	b14a      	cbz	r2, 1a001dc4 <__udivmoddi4+0x30>
1a001db0:	f1c2 0720 	rsb	r7, r2, #32
1a001db4:	fa01 f302 	lsl.w	r3, r1, r2
1a001db8:	fa20 f707 	lsr.w	r7, r0, r7
1a001dbc:	4095      	lsls	r5, r2
1a001dbe:	ea47 0803 	orr.w	r8, r7, r3
1a001dc2:	4094      	lsls	r4, r2
1a001dc4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001dc8:	0c23      	lsrs	r3, r4, #16
1a001dca:	fbb8 f7fe 	udiv	r7, r8, lr
1a001dce:	fa1f fc85 	uxth.w	ip, r5
1a001dd2:	fb0e 8817 	mls	r8, lr, r7, r8
1a001dd6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a001dda:	fb07 f10c 	mul.w	r1, r7, ip
1a001dde:	4299      	cmp	r1, r3
1a001de0:	d909      	bls.n	1a001df6 <__udivmoddi4+0x62>
1a001de2:	18eb      	adds	r3, r5, r3
1a001de4:	f107 30ff 	add.w	r0, r7, #4294967295
1a001de8:	f080 80e3 	bcs.w	1a001fb2 <__udivmoddi4+0x21e>
1a001dec:	4299      	cmp	r1, r3
1a001dee:	f240 80e0 	bls.w	1a001fb2 <__udivmoddi4+0x21e>
1a001df2:	3f02      	subs	r7, #2
1a001df4:	442b      	add	r3, r5
1a001df6:	1a5b      	subs	r3, r3, r1
1a001df8:	b2a4      	uxth	r4, r4
1a001dfa:	fbb3 f0fe 	udiv	r0, r3, lr
1a001dfe:	fb0e 3310 	mls	r3, lr, r0, r3
1a001e02:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a001e06:	fb00 fc0c 	mul.w	ip, r0, ip
1a001e0a:	45a4      	cmp	ip, r4
1a001e0c:	d909      	bls.n	1a001e22 <__udivmoddi4+0x8e>
1a001e0e:	192c      	adds	r4, r5, r4
1a001e10:	f100 33ff 	add.w	r3, r0, #4294967295
1a001e14:	f080 80cb 	bcs.w	1a001fae <__udivmoddi4+0x21a>
1a001e18:	45a4      	cmp	ip, r4
1a001e1a:	f240 80c8 	bls.w	1a001fae <__udivmoddi4+0x21a>
1a001e1e:	3802      	subs	r0, #2
1a001e20:	442c      	add	r4, r5
1a001e22:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a001e26:	eba4 040c 	sub.w	r4, r4, ip
1a001e2a:	2700      	movs	r7, #0
1a001e2c:	b11e      	cbz	r6, 1a001e36 <__udivmoddi4+0xa2>
1a001e2e:	40d4      	lsrs	r4, r2
1a001e30:	2300      	movs	r3, #0
1a001e32:	e9c6 4300 	strd	r4, r3, [r6]
1a001e36:	4639      	mov	r1, r7
1a001e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001e3c:	2a00      	cmp	r2, #0
1a001e3e:	d053      	beq.n	1a001ee8 <__udivmoddi4+0x154>
1a001e40:	fab2 f282 	clz	r2, r2
1a001e44:	2a00      	cmp	r2, #0
1a001e46:	f040 80b6 	bne.w	1a001fb6 <__udivmoddi4+0x222>
1a001e4a:	1b49      	subs	r1, r1, r5
1a001e4c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001e50:	fa1f f885 	uxth.w	r8, r5
1a001e54:	2701      	movs	r7, #1
1a001e56:	fbb1 fcfe 	udiv	ip, r1, lr
1a001e5a:	0c23      	lsrs	r3, r4, #16
1a001e5c:	fb0e 111c 	mls	r1, lr, ip, r1
1a001e60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a001e64:	fb08 f10c 	mul.w	r1, r8, ip
1a001e68:	4299      	cmp	r1, r3
1a001e6a:	d907      	bls.n	1a001e7c <__udivmoddi4+0xe8>
1a001e6c:	18eb      	adds	r3, r5, r3
1a001e6e:	f10c 30ff 	add.w	r0, ip, #4294967295
1a001e72:	d202      	bcs.n	1a001e7a <__udivmoddi4+0xe6>
1a001e74:	4299      	cmp	r1, r3
1a001e76:	f200 80ec 	bhi.w	1a002052 <__udivmoddi4+0x2be>
1a001e7a:	4684      	mov	ip, r0
1a001e7c:	1a59      	subs	r1, r3, r1
1a001e7e:	b2a3      	uxth	r3, r4
1a001e80:	fbb1 f0fe 	udiv	r0, r1, lr
1a001e84:	fb0e 1410 	mls	r4, lr, r0, r1
1a001e88:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a001e8c:	fb08 f800 	mul.w	r8, r8, r0
1a001e90:	45a0      	cmp	r8, r4
1a001e92:	d907      	bls.n	1a001ea4 <__udivmoddi4+0x110>
1a001e94:	192c      	adds	r4, r5, r4
1a001e96:	f100 33ff 	add.w	r3, r0, #4294967295
1a001e9a:	d202      	bcs.n	1a001ea2 <__udivmoddi4+0x10e>
1a001e9c:	45a0      	cmp	r8, r4
1a001e9e:	f200 80dc 	bhi.w	1a00205a <__udivmoddi4+0x2c6>
1a001ea2:	4618      	mov	r0, r3
1a001ea4:	eba4 0408 	sub.w	r4, r4, r8
1a001ea8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a001eac:	e7be      	b.n	1a001e2c <__udivmoddi4+0x98>
1a001eae:	428b      	cmp	r3, r1
1a001eb0:	d908      	bls.n	1a001ec4 <__udivmoddi4+0x130>
1a001eb2:	2e00      	cmp	r6, #0
1a001eb4:	d078      	beq.n	1a001fa8 <__udivmoddi4+0x214>
1a001eb6:	2700      	movs	r7, #0
1a001eb8:	e9c6 0100 	strd	r0, r1, [r6]
1a001ebc:	4638      	mov	r0, r7
1a001ebe:	4639      	mov	r1, r7
1a001ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001ec4:	fab3 f783 	clz	r7, r3
1a001ec8:	b97f      	cbnz	r7, 1a001eea <__udivmoddi4+0x156>
1a001eca:	428b      	cmp	r3, r1
1a001ecc:	d302      	bcc.n	1a001ed4 <__udivmoddi4+0x140>
1a001ece:	4282      	cmp	r2, r0
1a001ed0:	f200 80bd 	bhi.w	1a00204e <__udivmoddi4+0x2ba>
1a001ed4:	1a84      	subs	r4, r0, r2
1a001ed6:	eb61 0303 	sbc.w	r3, r1, r3
1a001eda:	2001      	movs	r0, #1
1a001edc:	4698      	mov	r8, r3
1a001ede:	2e00      	cmp	r6, #0
1a001ee0:	d0a9      	beq.n	1a001e36 <__udivmoddi4+0xa2>
1a001ee2:	e9c6 4800 	strd	r4, r8, [r6]
1a001ee6:	e7a6      	b.n	1a001e36 <__udivmoddi4+0xa2>
1a001ee8:	deff      	udf	#255	; 0xff
1a001eea:	f1c7 0520 	rsb	r5, r7, #32
1a001eee:	40bb      	lsls	r3, r7
1a001ef0:	fa22 fc05 	lsr.w	ip, r2, r5
1a001ef4:	ea4c 0c03 	orr.w	ip, ip, r3
1a001ef8:	fa01 f407 	lsl.w	r4, r1, r7
1a001efc:	fa20 f805 	lsr.w	r8, r0, r5
1a001f00:	fa21 f305 	lsr.w	r3, r1, r5
1a001f04:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a001f08:	ea48 0404 	orr.w	r4, r8, r4
1a001f0c:	fbb3 f9fe 	udiv	r9, r3, lr
1a001f10:	0c21      	lsrs	r1, r4, #16
1a001f12:	fb0e 3319 	mls	r3, lr, r9, r3
1a001f16:	fa1f f88c 	uxth.w	r8, ip
1a001f1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a001f1e:	fb09 fa08 	mul.w	sl, r9, r8
1a001f22:	459a      	cmp	sl, r3
1a001f24:	fa02 f207 	lsl.w	r2, r2, r7
1a001f28:	fa00 f107 	lsl.w	r1, r0, r7
1a001f2c:	d90b      	bls.n	1a001f46 <__udivmoddi4+0x1b2>
1a001f2e:	eb1c 0303 	adds.w	r3, ip, r3
1a001f32:	f109 30ff 	add.w	r0, r9, #4294967295
1a001f36:	f080 8088 	bcs.w	1a00204a <__udivmoddi4+0x2b6>
1a001f3a:	459a      	cmp	sl, r3
1a001f3c:	f240 8085 	bls.w	1a00204a <__udivmoddi4+0x2b6>
1a001f40:	f1a9 0902 	sub.w	r9, r9, #2
1a001f44:	4463      	add	r3, ip
1a001f46:	eba3 030a 	sub.w	r3, r3, sl
1a001f4a:	b2a4      	uxth	r4, r4
1a001f4c:	fbb3 f0fe 	udiv	r0, r3, lr
1a001f50:	fb0e 3310 	mls	r3, lr, r0, r3
1a001f54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a001f58:	fb00 f808 	mul.w	r8, r0, r8
1a001f5c:	45a0      	cmp	r8, r4
1a001f5e:	d908      	bls.n	1a001f72 <__udivmoddi4+0x1de>
1a001f60:	eb1c 0404 	adds.w	r4, ip, r4
1a001f64:	f100 33ff 	add.w	r3, r0, #4294967295
1a001f68:	d26b      	bcs.n	1a002042 <__udivmoddi4+0x2ae>
1a001f6a:	45a0      	cmp	r8, r4
1a001f6c:	d969      	bls.n	1a002042 <__udivmoddi4+0x2ae>
1a001f6e:	3802      	subs	r0, #2
1a001f70:	4464      	add	r4, ip
1a001f72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a001f76:	eba4 0408 	sub.w	r4, r4, r8
1a001f7a:	fba0 8902 	umull	r8, r9, r0, r2
1a001f7e:	454c      	cmp	r4, r9
1a001f80:	46c6      	mov	lr, r8
1a001f82:	464b      	mov	r3, r9
1a001f84:	d354      	bcc.n	1a002030 <__udivmoddi4+0x29c>
1a001f86:	d051      	beq.n	1a00202c <__udivmoddi4+0x298>
1a001f88:	2e00      	cmp	r6, #0
1a001f8a:	d069      	beq.n	1a002060 <__udivmoddi4+0x2cc>
1a001f8c:	ebb1 020e 	subs.w	r2, r1, lr
1a001f90:	eb64 0403 	sbc.w	r4, r4, r3
1a001f94:	fa04 f505 	lsl.w	r5, r4, r5
1a001f98:	fa22 f307 	lsr.w	r3, r2, r7
1a001f9c:	40fc      	lsrs	r4, r7
1a001f9e:	431d      	orrs	r5, r3
1a001fa0:	e9c6 5400 	strd	r5, r4, [r6]
1a001fa4:	2700      	movs	r7, #0
1a001fa6:	e746      	b.n	1a001e36 <__udivmoddi4+0xa2>
1a001fa8:	4637      	mov	r7, r6
1a001faa:	4630      	mov	r0, r6
1a001fac:	e743      	b.n	1a001e36 <__udivmoddi4+0xa2>
1a001fae:	4618      	mov	r0, r3
1a001fb0:	e737      	b.n	1a001e22 <__udivmoddi4+0x8e>
1a001fb2:	4607      	mov	r7, r0
1a001fb4:	e71f      	b.n	1a001df6 <__udivmoddi4+0x62>
1a001fb6:	f1c2 0320 	rsb	r3, r2, #32
1a001fba:	fa20 f703 	lsr.w	r7, r0, r3
1a001fbe:	4095      	lsls	r5, r2
1a001fc0:	fa01 f002 	lsl.w	r0, r1, r2
1a001fc4:	fa21 f303 	lsr.w	r3, r1, r3
1a001fc8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001fcc:	4338      	orrs	r0, r7
1a001fce:	0c01      	lsrs	r1, r0, #16
1a001fd0:	fbb3 f7fe 	udiv	r7, r3, lr
1a001fd4:	fa1f f885 	uxth.w	r8, r5
1a001fd8:	fb0e 3317 	mls	r3, lr, r7, r3
1a001fdc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a001fe0:	fb07 f308 	mul.w	r3, r7, r8
1a001fe4:	428b      	cmp	r3, r1
1a001fe6:	fa04 f402 	lsl.w	r4, r4, r2
1a001fea:	d907      	bls.n	1a001ffc <__udivmoddi4+0x268>
1a001fec:	1869      	adds	r1, r5, r1
1a001fee:	f107 3cff 	add.w	ip, r7, #4294967295
1a001ff2:	d228      	bcs.n	1a002046 <__udivmoddi4+0x2b2>
1a001ff4:	428b      	cmp	r3, r1
1a001ff6:	d926      	bls.n	1a002046 <__udivmoddi4+0x2b2>
1a001ff8:	3f02      	subs	r7, #2
1a001ffa:	4429      	add	r1, r5
1a001ffc:	1acb      	subs	r3, r1, r3
1a001ffe:	b281      	uxth	r1, r0
1a002000:	fbb3 f0fe 	udiv	r0, r3, lr
1a002004:	fb0e 3310 	mls	r3, lr, r0, r3
1a002008:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a00200c:	fb00 f308 	mul.w	r3, r0, r8
1a002010:	428b      	cmp	r3, r1
1a002012:	d907      	bls.n	1a002024 <__udivmoddi4+0x290>
1a002014:	1869      	adds	r1, r5, r1
1a002016:	f100 3cff 	add.w	ip, r0, #4294967295
1a00201a:	d210      	bcs.n	1a00203e <__udivmoddi4+0x2aa>
1a00201c:	428b      	cmp	r3, r1
1a00201e:	d90e      	bls.n	1a00203e <__udivmoddi4+0x2aa>
1a002020:	3802      	subs	r0, #2
1a002022:	4429      	add	r1, r5
1a002024:	1ac9      	subs	r1, r1, r3
1a002026:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a00202a:	e714      	b.n	1a001e56 <__udivmoddi4+0xc2>
1a00202c:	4541      	cmp	r1, r8
1a00202e:	d2ab      	bcs.n	1a001f88 <__udivmoddi4+0x1f4>
1a002030:	ebb8 0e02 	subs.w	lr, r8, r2
1a002034:	eb69 020c 	sbc.w	r2, r9, ip
1a002038:	3801      	subs	r0, #1
1a00203a:	4613      	mov	r3, r2
1a00203c:	e7a4      	b.n	1a001f88 <__udivmoddi4+0x1f4>
1a00203e:	4660      	mov	r0, ip
1a002040:	e7f0      	b.n	1a002024 <__udivmoddi4+0x290>
1a002042:	4618      	mov	r0, r3
1a002044:	e795      	b.n	1a001f72 <__udivmoddi4+0x1de>
1a002046:	4667      	mov	r7, ip
1a002048:	e7d8      	b.n	1a001ffc <__udivmoddi4+0x268>
1a00204a:	4681      	mov	r9, r0
1a00204c:	e77b      	b.n	1a001f46 <__udivmoddi4+0x1b2>
1a00204e:	4638      	mov	r0, r7
1a002050:	e745      	b.n	1a001ede <__udivmoddi4+0x14a>
1a002052:	f1ac 0c02 	sub.w	ip, ip, #2
1a002056:	442b      	add	r3, r5
1a002058:	e710      	b.n	1a001e7c <__udivmoddi4+0xe8>
1a00205a:	3802      	subs	r0, #2
1a00205c:	442c      	add	r4, r5
1a00205e:	e721      	b.n	1a001ea4 <__udivmoddi4+0x110>
1a002060:	4637      	mov	r7, r6
1a002062:	e6e8      	b.n	1a001e36 <__udivmoddi4+0xa2>

1a002064 <__aeabi_idiv0>:
1a002064:	4770      	bx	lr
1a002066:	bf00      	nop

1a002068 <__libc_init_array>:
1a002068:	b570      	push	{r4, r5, r6, lr}
1a00206a:	4d0d      	ldr	r5, [pc, #52]	; (1a0020a0 <__libc_init_array+0x38>)
1a00206c:	4c0d      	ldr	r4, [pc, #52]	; (1a0020a4 <__libc_init_array+0x3c>)
1a00206e:	1b64      	subs	r4, r4, r5
1a002070:	10a4      	asrs	r4, r4, #2
1a002072:	2600      	movs	r6, #0
1a002074:	42a6      	cmp	r6, r4
1a002076:	d109      	bne.n	1a00208c <__libc_init_array+0x24>
1a002078:	4d0b      	ldr	r5, [pc, #44]	; (1a0020a8 <__libc_init_array+0x40>)
1a00207a:	4c0c      	ldr	r4, [pc, #48]	; (1a0020ac <__libc_init_array+0x44>)
1a00207c:	f7fe fd27 	bl	1a000ace <_init>
1a002080:	1b64      	subs	r4, r4, r5
1a002082:	10a4      	asrs	r4, r4, #2
1a002084:	2600      	movs	r6, #0
1a002086:	42a6      	cmp	r6, r4
1a002088:	d105      	bne.n	1a002096 <__libc_init_array+0x2e>
1a00208a:	bd70      	pop	{r4, r5, r6, pc}
1a00208c:	f855 3b04 	ldr.w	r3, [r5], #4
1a002090:	4798      	blx	r3
1a002092:	3601      	adds	r6, #1
1a002094:	e7ee      	b.n	1a002074 <__libc_init_array+0xc>
1a002096:	f855 3b04 	ldr.w	r3, [r5], #4
1a00209a:	4798      	blx	r3
1a00209c:	3601      	adds	r6, #1
1a00209e:	e7f2      	b.n	1a002086 <__libc_init_array+0x1e>
1a0020a0:	1a002384 	.word	0x1a002384
1a0020a4:	1a002384 	.word	0x1a002384
1a0020a8:	1a002384 	.word	0x1a002384
1a0020ac:	1a002388 	.word	0x1a002388

1a0020b0 <memset>:
1a0020b0:	4402      	add	r2, r0
1a0020b2:	4603      	mov	r3, r0
1a0020b4:	4293      	cmp	r3, r2
1a0020b6:	d100      	bne.n	1a0020ba <memset+0xa>
1a0020b8:	4770      	bx	lr
1a0020ba:	f803 1b01 	strb.w	r1, [r3], #1
1a0020be:	e7f9      	b.n	1a0020b4 <memset+0x4>
1a0020c0:	00f00140 	.word	0x00f00140
1a0020c4:	00000000 	.word	0x00000000
1a0020c8:	1a000a19 	.word	0x1a000a19
1a0020cc:	1a000a31 	.word	0x1a000a31
1a0020d0:	1a000a01 	.word	0x1a000a01
1a0020d4:	1a0009d1 	.word	0x1a0009d1
1a0020d8:	1a0009e9 	.word	0x1a0009e9
1a0020dc:	00002710 	.word	0x00002710
1a0020e0:	00000014 	.word	0x00000014
1a0020e4:	00000014 	.word	0x00000014
1a0020e8:	34002c39 	.word	0x34002c39
1a0020ec:	00000002 	.word	0x00000002
1a0020f0:	0030c100 	.word	0x0030c100
1a0020f4:	00780085 	.word	0x00780085
1a0020f8:	81120364 	.word	0x81120364
1a0020fc:	0000283e 	.word	0x0000283e
1a002100:	00278208 	.word	0x00278208
1a002104:	0c2b310f 	.word	0x0c2b310f
1a002108:	f14e080e 	.word	0xf14e080e
1a00210c:	03100737 	.word	0x03100737
1a002110:	0000090e 	.word	0x0000090e
1a002114:	03140e00 	.word	0x03140e00
1a002118:	c1310711 	.word	0xc1310711
1a00211c:	0c0f0848 	.word	0x0c0f0848
1a002120:	ff0f3631 	.word	0xff0f3631

1a002124 <InitClkStates>:
1a002124:	01010f01                                ....

1a002128 <pinmuxing>:
1a002128:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a002138:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a002148:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a002158:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a002168:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a002178:	00d50301 00d50401 00160107 00560207     ..............V.
1a002188:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a002198:	00570206                                ..W.

1a00219c <ExtRateIn>:
1a00219c:	00000000                                ....

1a0021a0 <GpioButtons>:
1a0021a0:	08000400 09010900                       ........

1a0021a8 <GpioLeds>:
1a0021a8:	01050005 0e000205 0c010b01              ............

1a0021b4 <GpioPorts>:
1a0021b4:	03030003 0f050403 05031005 07030603     ................
1a0021c4:	ffff0802                                ....

1a0021c8 <OscRateIn>:
1a0021c8:	00b71b00                                ....

1a0021cc <InitClkStates>:
1a0021cc:	00010100 00010909 0001090a 01010701     ................
1a0021dc:	00010902 00010906 0101090c 0001090d     ................
1a0021ec:	0001090e 0001090f 00010910 00010911     ................
1a0021fc:	00010912 00010913 00011114 00011119     ................
1a00220c:	0001111a 0001111b 08040201 0f0f0f03     ................
1a00221c:	000000ff                                ....

1a002220 <periph_to_base>:
1a002220:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a002230:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a002240:	000100e0 01000100 01200003 00060120     .......... . ...
1a002250:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a002260:	01820013 00120182 01a201a2 01c20011     ................
1a002270:	001001c2 01e201e2 0202000f 000e0202     ................
1a002280:	02220222 0223000d 001c0223              "."...#.#...

1a00228c <UART_BClock>:
1a00228c:	01a201c2 01620182                       ......b.

1a002294 <UART_PClock>:
1a002294:	00820081 00a200a1                       ........

1a00229c <gpioPinsInit>:
1a00229c:	02000104 00050701 05010d03 04080100     ................
1a0022ac:	02020002 02000304 00000403 04070002     ................
1a0022bc:	030c0300 09050402 05040103 04030208     ................
1a0022cc:	04020305 06040504 0802000c 03000b06     ................
1a0022dc:	00090607 07060503 060f0504 03030004     ................
1a0022ec:	02000404 00050404 06040502 04060200     ................
1a0022fc:	0c050408 05040a04 0003010e 14010a00     ................
1a00230c:	010f0000 0d000012 00001101 0010010c     ................
1a00231c:	07070300 000f0300 01000001 00000000     ................
1a00232c:	000a0600 08060603 06100504 04030005     ................
1a00233c:	03000106 04090400 04010d05 010b0000     ................
1a00234c:	0200000f 00000001 00010104 02010800     ................
1a00235c:	01090000 09010006 05040002 04010200     ................
1a00236c:	02020105 02020504 0e00000a 01000b02     ................
1a00237c:	000c020b ffff0c01                       ........
